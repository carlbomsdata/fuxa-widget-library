<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="21.373436mm"
   height="38.60165mm"
   viewBox="0 0 21.373436 38.60165"
   version="1.1"
   id="Layer_1"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs1" /><g
     id="layer25"
     transform="translate(-321.55269,-185.39219)"><g
       id="g103"><g
         id="g62"
         transform="translate(54.624198,0.54262448)"><path
           style="fill:#d4d4d4;fill-opacity:1"
           d="m 267.42892,204.15933 v -18.78541 h 10.18646 10.18646 v 18.78541 18.78542 h -10.18646 -10.18646 z"
           id="path82" /><path
           style="fill:#c2c2c2;fill-opacity:1"
           d="m 267.42892,204.15933 v -18.78541 h 10.18646 10.18646 v 18.78541 18.78542 h -10.18646 -10.18646 z m 14.92062,17.79323 0.1396,-0.46302 -0.0174,-3.78654 -0.0174,-3.78654 0.12366,-0.12366 0.12366,-0.12366 -0.39365,-1.51376 -0.39364,-1.51375 -0.12432,-1.25327 -0.12432,-1.25326 0.59042,-1.21967 0.59043,-1.21966 -0.27142,-2.68645 -0.27143,-2.68644 0.0941,-1.19063 0.0941,-1.19062 0.24405,-1.45187 0.24405,-1.45187 -0.89646,-0.84547 -0.89645,-0.84547 v -0.95312 -0.95311 l 0.40034,-0.61101 0.40035,-0.61101 0.1432,-2.12186 0.14319,-2.12186 -0.81951,-0.1639 -0.81951,-0.16391 -1.97299,0.16678 -1.97299,0.16678 v 0.73712 0.73711 l 0.77348,1.92517 0.77348,1.92516 -0.24863,0.46457 -0.24863,0.46457 -1.07989,0.32354 -1.0799,0.32355 0.16161,1.01064 0.16161,1.01064 0.59187,0.70249 0.59188,0.7025 0.45012,0.40165 0.45012,0.40166 -0.58241,0.59887 -0.58242,0.59887 -0.46302,0.50005 -0.46302,0.50004 v 0.98739 0.98739 l 0.25381,0.47424 0.25381,0.47424 0.17364,2.8818 0.17364,2.8818 0.63088,1.10545 0.63089,1.10545 v 0.5506 0.55061 l -0.79375,0.83058 -0.79375,0.83059 -0.0208,0.29149 -0.0208,0.29148 0.0397,1.67 0.0397,1.67 -0.31278,0.37688 -0.31278,0.37688 0.14733,0.86354 0.14733,0.86354 0.32316,1.52135 0.32315,1.52136 h 2.71606 2.71605 z"
           id="path81" /><path
           style="fill:#b0b0b0;fill-opacity:1"
           d="m 267.42892,204.15933 v -18.78541 l 5.6224,0.0477 5.6224,0.0477 -1.98438,0.16925 -1.98437,0.16925 0.46302,0.0477 0.46302,0.0477 v 1.27235 1.27235 l 0.38846,0.51359 0.38846,0.51359 0.008,0.58257 0.008,0.58258 -0.94917,0.92182 -0.94916,0.92181 0.53888,2.13097 0.53888,2.13097 -0.30495,1.45383 -0.30494,1.45382 0.31835,1.54133 0.31836,1.54132 v 2.83684 2.83684 l 0.39687,0.94986 0.39688,0.94986 v 0.56886 0.56886 l -0.79816,0.9683 -0.79816,0.96831 0.28732,3.25917 0.28733,3.25916 0.1406,1.25677 0.1406,1.25678 h 4.03485 4.03484 l 0.14662,-5.4819 0.14661,-5.4819 -0.65719,-0.78102 -0.65719,-0.78103 0.17283,-0.94697 0.17283,-0.94698 0.39927,-0.61953 0.39927,-0.61954 0.10846,-5.73046 0.10846,-5.73047 -0.005,-0.26458 -0.005,-0.26458 -0.15166,-1.25678 -0.15165,-1.25677 h -0.23794 -0.23795 v -2.34176 -2.34177 l 0.29047,-0.83323 0.29047,-0.83324 0.56943,-0.0485 0.56943,-0.0485 -2.11667,-0.16754 -2.11667,-0.16755 3.50573,-0.0485 3.50573,-0.0485 v 18.78541 18.78542 h -10.18646 -10.18646 z m 12.24202,-18.70418 0.46806,-0.12197 0.32569,0.13177 0.32569,0.13177 -0.79375,-0.01 -0.79375,-0.01 z"
           id="path80" /><path
           style="fill:#9e9e9e;fill-opacity:1"
           d="m 267.42892,204.15933 v -18.78541 l 3.10886,0.0186 3.10885,0.0186 -0.52916,0.22739 -0.52917,0.22739 0.82164,0.0186 0.82163,0.0186 0.16307,1.74621 0.16306,1.74622 -0.38939,0.93193 -0.38939,0.93193 v 0.99276 0.99276 l 0.38266,1.08455 0.38265,1.08455 -0.15774,3.68808 -0.15773,3.68809 0.33821,4.07852 0.33821,4.07853 -0.7016,1.06019 -0.7016,1.06019 0.55592,3.41723 0.55593,3.41722 -0.0867,1.25694 -0.0867,1.25693 5.31844,-1.6e-4 5.31845,-1.6e-4 0.20349,-4.96094 0.2035,-4.96094 -0.0831,-1.19063 -0.0831,-1.19062 -0.01,-7.14375 -0.01,-7.14375 0.0818,-2.18421 0.0818,-2.18422 -0.5539,-0.89623 -0.5539,-0.89623 0.46704,-1.87954 0.46704,-1.87954 0.52917,-0.005 0.52916,-0.005 -0.39687,-0.25648 -0.39688,-0.25648 1.12448,-0.004 1.12448,-0.004 v 18.78541 18.78542 h -10.18646 -10.18646 z"
           id="path69" /><path
           style="fill:#8c8c8c;fill-opacity:1"
           d="m 267.60531,222.76836 -0.17639,-0.17639 v -18.29152 -18.29153 l 0.3175,-0.3175 0.3175,-0.3175 h 1.38668 1.38668 l 0.16352,0.26458 0.16352,0.26458 h 0.95 0.94999 l -0.16351,3.37344 -0.16352,3.37344 0.41352,1.05833 0.41352,1.05834 0.13898,0.73879 0.13897,0.73879 -0.48605,1.24558 -0.48605,1.24559 0.0659,2.24895 0.0659,2.24896 0.41014,1.6908 0.41014,1.6908 -0.17855,1.53835 -0.17854,1.53836 -0.3477,0.28857 -0.3477,0.28856 -0.16942,1.50937 -0.16942,1.50936 0.41289,1.98437 0.41289,1.98438 0.30607,1.60237 0.30606,1.60237 -0.44183,0.88568 -0.44184,0.88567 v 0.0916 0.0917 h 6.64198 6.64198 l -0.083,-13.95678 -0.083,-13.95677 0.0463,-3.04271 0.0463,-3.0427 -0.0269,-0.52917 -0.0269,-0.52917 0.0363,-0.7276 0.0363,-0.72761 h 0.39688 0.39687 v -0.28019 -0.2802 l 0.26459,0.16352 0.26458,0.16352 v 18.63751 18.63751 h -9.87778 -9.87778 z"
           id="path68" /><path
           style="fill:#7a7a7a;fill-opacity:1"
           d="m 267.75788,204.2287 0.0679,-18.72249 0.79375,0.0332 0.79375,0.0332 1.18742,0.23817 1.18741,0.23817 0.0466,2.63906 0.0466,2.63906 0.41941,1.98438 0.41942,1.98437 2.1e-4,0.29381 2.2e-4,0.29381 -0.67849,0.99981 -0.67849,0.99981 0.16825,0.99587 0.16826,0.99588 0.0915,1.41467 0.0915,1.41468 0.41872,1.80235 0.41872,1.80236 v 0.34353 0.34354 l -0.69596,1.02555 -0.69596,1.02556 0.15023,2.78168 0.15022,2.78168 0.13877,0.52916 0.13876,0.52917 0.4192,1.71922 0.41919,1.71921 -0.13768,0.52975 -0.13768,0.52974 -0.66829,0.76875 -0.6683,0.76876 v 0.31795 0.31795 l 4.59773,0.1879 4.59772,0.18791 3.20748,-0.18762 3.20749,-0.18761 0.0142,-0.16095 0.0142,-0.16096 0.0919,-7.01146 0.0919,-7.01146 -0.34805,-1.82826 -0.34806,-1.82826 0.36759,-1.74361 0.36758,-1.74362 -0.40453,-2.17354 -0.40453,-2.17353 0.34398,-0.60459 0.34397,-0.60459 0.0215,-4.61497 0.0215,-4.61497 0.3121,-0.10404 0.31209,-0.10403 -0.0679,18.47734 -0.0679,18.47734 -9.85751,0.0694 -9.8575,0.0694 z"
           id="path67" /><path
           style="fill:#686868;fill-opacity:1"
           d="m 267.87311,222.77157 -0.1796,-0.1796 v -18.43264 -18.43264 l 0.12316,-0.12315 0.12315,-0.12316 1.43884,0.26358 1.43884,0.26358 0.17358,2.92433 0.17357,2.92434 0.14308,1.19062 0.14307,1.19063 0.0175,0.2818 0.0175,0.28179 -0.58589,0.79246 -0.58589,0.79246 0.28248,2.49762 0.28249,2.49762 0.27939,2.13364 0.2794,2.13364 -0.57166,0.9689 -0.57167,0.9689 0.15481,0.73392 0.15481,0.73392 0.24544,3.96875 0.24545,3.96875 0.27005,0.70916 0.27006,0.70916 -0.55718,0.70834 -0.55718,0.70833 -0.12032,1.25223 -0.12032,1.25223 3.24614,0.17454 3.24614,0.17455 h 3.62382 3.62381 l 1.6167,-0.16898 1.6167,-0.16898 -0.0273,-18.09449 -0.0273,-18.0945 0.17098,-0.17098 0.17098,-0.17098 -0.068,18.5006 -0.0679,18.5006 -9.67613,0.0694 -9.67613,0.0693 z"
           id="path66" /><path
           style="fill:#575757;fill-opacity:1"
           d="m 267.8699,222.76836 -0.17639,-0.17639 v -18.50759 -18.5076 l 0.59531,0.15954 0.59531,0.15954 0.56351,0.004 0.56352,0.004 0.19165,1.65365 0.19165,1.65365 0.0231,1.5875 0.0231,1.5875 -0.4194,1.76235 -0.41939,1.76236 0.26022,2.33868 0.26022,2.33869 -0.16694,2.91042 -0.16693,2.91041 -0.01,0.92604 -0.01,0.92605 0.22169,4.36562 0.2217,4.36563 -0.37007,1.7472 -0.37007,1.7472 0.17607,0.93854 0.17607,0.93855 3.23408,0.18642 3.23408,0.18642 5.59724,-0.094 5.59725,-0.094 -0.12276,0.19843 -0.12275,0.19844 h -9.59758 -9.59758 z m 19.47845,-18.21215 0.004,-1.32292 0.11058,0.73124 0.11057,0.73125 -0.11419,0.59167 -0.11418,0.59168 z m -0.004,-7.27604 v -1.19063 l 0.11466,0.59531 0.11466,0.59532 -0.11466,0.59531 -0.11466,0.59531 z"
           id="path65" /><path
           style="fill:#454545;fill-opacity:1"
           d="m 267.81515,222.61402 -0.12634,-0.33073 0.0685,-18.25625 0.0685,-18.25625 0.66146,0.0934 0.66146,0.0934 0.17885,0.28739 0.17886,0.2874 0.18726,2.24801 0.18726,2.248 -0.33946,0.93876 -0.33946,0.93875 0.006,14.63348 0.006,14.63348 0.13701,0.13701 0.13701,0.13701 3.66646,0.20971 3.66645,0.2097 -4.44007,0.0392 -4.44008,0.0392 z m 16.01794,0.18305 0.39688,-0.0863 1.63812,-0.0972 1.63812,-0.0972 -0.13238,0.21419 -0.13238,0.2142 -1.90262,-0.0307 -1.90261,-0.0307 z"
           id="path64" /><path
           style="fill:#333333;fill-opacity:1"
           d="m 267.8699,222.76836 -0.17639,-0.17639 v -18.34444 -18.34445 h 0.49455 0.49454 l 0.15946,0.8599 0.15947,0.8599 0.24109,0.97854 0.24109,0.97855 -0.40309,0.74125 -0.40309,0.74124 0.0597,15.61042 0.0597,15.61041 0.0948,0.0953 0.0948,0.0953 2.59458,0.1969 2.59459,0.1969 -3.06476,0.0385 -3.06475,0.0385 z m 17.81528,0.073 v -0.10335 l 0.90748,-0.10594 0.90748,-0.10594 -0.12935,0.20928 -0.12934,0.20929 h -0.77814 -0.77813 z"
           id="path63" /></g><g
         id="g102"
         transform="translate(54.624198,0.54262448)"><path
           id="shape"
           style="opacity:0.6;fill:none;fill-opacity:1;stroke:#000000;stroke-linejoin:bevel"
           d="m 280.13883,185.33337 -0.15451,0.0403 h -2.36885 -9.55135 -0.63511 v 18.78541 0.1416 l -5.1e-4,18.64434 h 0.26148 v 0.006 l 0.36018,-0.003 0.003,0.003 0.79426,-0.006 h 8.79637 9.59734 l 5.2e-4,-5.1e-4 h 0.56069 v -5.2e-4 -18.7849 -5.2e-4 -18.78541 h -0.74414 l -0.0496,-0.031 v 0.031 h -6.76961 z" /></g></g></g>


<script type="text/javascript">
  <![CDATA[
    // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
    let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#ffffff';
    let _pc_state1Colour     = '#00ff00';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    let _pn_strokeWidth      = 1;     
    let _pn_opacity          = 0.60;  
    let _pn_indicationMode   = 0;     
    //!export-end
    
    // Internal state variables
    let stateNumber = 0;
    let isBlinking = false;
    let myCheckInterval;
    
    // Force global timing mechanism by using epoch time
    function getGlobalBlinkState(interval) {
      // Use the current time divided by interval, which will give
      // the same result for all SVGs at the same moment
      return Math.floor(Date.now() / interval) % 2 === 0;
    }
    
    // Function to update the color based on the set state
    function logic() {
      switch (stateNumber) {
        case 0: // off
          setColors(_pc_state0Colour);
          stopBlinking();
          break; 
        case 1: // run
          setColors(_pc_state1Colour);
          stopBlinking();
          break;
        case 2: // warning
          setColors(_pc_state2Colour);
          stopBlinking();
          break;
        case 3: // fault
          startForceSync();
          break;
        case 4: // invalid 
          setColors(_pc_state4Colour);
          stopBlinking();
          break;
        case 5: // spare
          setColors(_pc_state5Colour);
          stopBlinking();
          break;
        default:
          console.log('Undefined State');
          stopBlinking();
      }
    }

    // Initial setup
    function init() {
      // Set up visibility change listener
      document.addEventListener('visibilitychange', handleVisibilityChange);
      
      // Initial state rendering
      logic(); 
    }
    
    // Handler for tab visibility changes
    function handleVisibilityChange() {
      if (document.visibilityState === 'visible' && isBlinking) {
        // Resume checking when tab becomes visible again
        startForceSync();
      } else if (document.visibilityState === 'hidden' && isBlinking) {
        // Pause checking when tab is hidden
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
    }
    
    // Update the blinking display based on global time
    function updateBlinkDisplay() {
      if (!isBlinking) return;
      
      // Get the global blink state
      const showFaultColor = getGlobalBlinkState(_pn_setInterval);
      
      // Set the appropriate color
      if (showFaultColor) {
        setColors(_pc_state3Colour);
      } else {
        setColors(_pc_state0Colour);
      }
    }
    
    // Start forced synchronization
    function startForceSync() {
      // Clear any existing interval
      stopBlinking();
      
      // Set blinking state
      isBlinking = true;
      
      // Update display immediately
      updateBlinkDisplay();
      
      // Check very frequently to ensure tight synchronization (every 16ms = ~60fps)
      myCheckInterval = setInterval(updateBlinkDisplay, 16);
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
      if (id === '_pn_setInterval')    _pn_setInterval    = value;
      if (id === '_pc_state0Colour')   _pc_state0Colour   = value;
      if (id === '_pc_state1Colour')   _pc_state1Colour   = value;
      if (id === '_pc_state2Colour')   _pc_state2Colour   = value;
      if (id === '_pc_state3Colour')   _pc_state3Colour   = value;
      if (id === '_pc_state4Colour')   _pc_state4Colour   = value;
      if (id === '_pc_state5Colour')   _pc_state5Colour   = value;
      if (id === '_pn_lightShade')     _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade')      _pn_darkShade      = value;
      if (id === '_pn_shadowShade')    _pn_shadowShade    = value;
      if (id === '_pn_strokeWidth')    _pn_strokeWidth    = value;
      if (id === '_pn_opacity')        _pn_opacity        = value;
      if (id === '_pn_indicationMode') _pn_indicationMode = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Function to update the fill and/or stroke color based on indication mode
    function setColors(color) {
      // Get the single element with ID "shape"
      const shapeElement = document.getElementById('shape');
      if (!shapeElement) return; // Safety check
      
      // Set opacity
      shapeElement.style.opacity = _pn_opacity;
      
      // Set stroke width
      shapeElement.style.strokeWidth = _pn_strokeWidth;
      
      // Apply colors based on indication mode
      switch(_pn_indicationMode) {
        case 0: // Fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
          break;
        case 1: // Stroke only
          shapeElement.style.fill = "none";
          shapeElement.style.stroke = color;
          break;
        case 2: // Both fill and stroke
          shapeElement.style.fill = color;
          shapeElement.style.stroke = color;
          break;
        default:
          // Default to fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
      }
    }

    // Function to stop blinking
    function stopBlinking() {
      if (myCheckInterval) {
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
      isBlinking = false;
    }

    // Clean up event listeners when widget is destroyed
    function cleanup() {
      stopBlinking();
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    }

    // Initialize the SVG
    init();

    // Ensure cleanup when SVG is removed
    const cleanupObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.removedNodes.forEach((node) => {
          if (node.id === 'Layer_1') {
            cleanup();
            cleanupObserver.disconnect();
          }
        });
      });
    });
    cleanupObserver.observe(document.body, { childList: true, subtree: true });
  ]]>
  </script>
</svg>

