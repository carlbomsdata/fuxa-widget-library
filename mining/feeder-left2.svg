<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="16.870029mm"
   height="8.3417063mm"
   viewBox="0 0 16.870029 8.3417063"
   version="1.1"
   id="Layer_1"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs1" /><g
     id="layer9"
     transform="translate(-315.65593,-104.00605)"><g
       id="g239"><g
         id="g210"
         transform="translate(48.493439,0.45965345)"><path
           style="fill:#d4d4d4;fill-opacity:1"
           d="m 276.3664,111.2509 -4.89479,-0.36313 -1.78694,-0.28745 -1.78694,-0.28745 -0.1153,-0.57124 -0.1153,-0.57124 -0.15324,-1.3578 -0.15325,-1.35781 6.96224,-1.35417 6.96223,-1.35418 h 0.71565 0.71564 v 0.24676 0.24675 l -0.49584,0.15738 -0.49585,0.15737 0.13358,1.24952 0.13357,1.24951 0.26238,0.33073 0.26237,0.33073 h 0.35517 0.35517 l 0.27389,0.51178 0.2739,0.51177 v 0.88456 0.88457 l -0.41188,0.58803 -0.41188,0.58804 -0.84489,-0.035 -0.84489,-0.0349 z"
           id="path219" /><path
           style="fill:#c2c2c2;fill-opacity:1"
           d="m 276.3664,111.2509 -4.89479,-0.36313 -1.78694,-0.28745 -1.78694,-0.28745 -0.1153,-0.57124 -0.1153,-0.57124 -0.15324,-1.3578 -0.15325,-1.35781 6.96224,-1.35417 6.96223,-1.35418 h 0.71565 0.71564 v 0.24676 0.24675 l -0.49584,0.15738 -0.49585,0.15737 0.13358,1.24952 0.13357,1.24951 0.26238,0.33073 0.26237,0.33073 h 0.35517 0.35517 l 0.27389,0.51178 0.2739,0.51177 v 0.88456 0.88457 l -0.41188,0.58803 -0.41188,0.58804 -0.84489,-0.035 -0.84489,-0.0349 z m 6.18792,-3.31934 -0.14961,-0.24207 -0.37332,0.30983 -0.37332,0.30982 v 0.40549 0.40548 l 0.52293,-0.47324 0.52293,-0.47324 z m -7.51083,-1.6872 v -0.38126 l -0.59532,0.0186 -0.59531,0.0186 -0.52916,0.21408 -0.52917,0.21409 0.92604,0.25764 0.92604,0.25765 0.19844,-0.10907 0.19844,-0.10906 z m 2.60301,-0.35622 0.0895,-0.6293 -1.13786,0.18195 -1.13787,0.18196 -0.0656,0.0656 -0.0656,0.0656 0.14095,0.53899 0.14095,0.539 0.97303,-0.15724 0.97304,-0.15724 z m 1.91669,-0.1686 0.78927,-0.40814 -0.16158,-0.26144 -0.16157,-0.26143 -0.97156,0.17551 -0.97155,0.17551 -0.0724,0.0593 -0.0724,0.0593 0.16683,0.43475 0.16682,0.43474 h 0.24942 0.24941 z"
           id="path218" /><path
           style="fill:#b0b0b0;fill-opacity:1"
           d="m 276.3664,111.2509 -4.89479,-0.36313 -1.78694,-0.28745 -1.78694,-0.28745 -0.1153,-0.57124 -0.1153,-0.57124 -0.15324,-1.3578 -0.15325,-1.35781 6.96224,-1.35417 6.96223,-1.35418 h 0.71565 0.71564 v 0.24676 0.24675 l -0.49584,0.15738 -0.49585,0.15737 0.13121,1.24952 0.13121,1.24951 0.23049,0.24951 0.2305,0.2495 -0.54499,0.58011 -0.54498,0.58011 0.1844,0.98294 0.1844,0.98295 0.8076,-0.8076 0.8076,-0.8076 -0.3072,-0.67423 -0.3072,-0.67423 h 0.2496 0.2496 l 0.27389,0.51178 0.2739,0.51177 v 0.88456 0.88457 l -0.41188,0.58803 -0.41188,0.58804 -0.84489,-0.035 -0.84489,-0.0349 z m 1.32292,-2.2128 v -0.26458 l -0.33073,0.0264 -0.33073,0.0264 -0.66146,0.21184 -0.66145,0.21184 0.99218,0.0264 0.99219,0.0264 z m 2.32861,-0.66869 -0.0796,-0.0783 -0.72761,0.13977 -0.7276,0.13977 v 0.21998 0.21997 l 0.80726,-0.28141 0.80725,-0.28141 z m -11.32444,-0.91881 v -0.79375 h -0.27289 -0.27289 l -0.15359,0.40024 -0.15358,0.40025 0.32658,0.3935 0.32658,0.39351 h 0.0999 0.0999 z m 6.35,-0.74965 v -0.74966 l -0.14503,-0.14502 -0.14502,-0.14502 -1.0456,0.2654 -1.0456,0.2654 v 0.31177 0.31178 l 0.3175,0.3175 0.3175,0.3175 h 0.87312 0.87313 z m 2.60161,-0.005 0.0881,-0.62222 -0.1724,-0.68689 -0.1724,-0.6869 -0.21826,0.35316 -0.21826,0.35315 -0.6816,-0.13029 -0.68159,-0.1303 0.12593,0.20377 0.12593,0.20376 -0.29935,0.0998 -0.29936,0.0998 0.18963,0.86338 0.18963,0.86339 0.96797,-0.0807 0.96798,-0.0807 z m -5.24745,-0.0392 v -0.26458 h -0.41249 -0.41249 l 0.16353,0.26458 0.16352,0.26458 h 0.24897 0.24896 z m 7.15689,-0.13909 0.78061,-0.40367 v -0.62571 -0.62572 l -0.90748,-0.10594 -0.90748,-0.10595 0.12935,0.20929 0.12934,0.20929 h -0.41249 -0.41249 v 0.50753 0.50752 l 0.1606,0.41852 0.1606,0.41851 h 0.24942 0.24941 z m 1.83895,-1.44841 v -0.52917 h -0.39688 -0.39687 v 0.11066 0.11065 l 0.1606,0.41851 0.1606,0.41852 h 0.23627 0.23628 z"
           id="path217" /><path
           style="fill:#9e9e9e;fill-opacity:1"
           d="m 276.3664,111.2509 -4.89479,-0.36313 -1.78694,-0.28745 -1.78694,-0.28745 -0.1153,-0.57124 -0.1153,-0.57124 -0.15248,-1.35202 -0.15248,-1.35202 2.31931,-0.45313 2.3193,-0.45313 0.66146,-0.15696 0.66146,-0.15697 -0.35554,0.43161 -0.35553,0.43161 0.18035,1.06749 0.18035,1.06748 h 1.05942 1.05943 l -0.0905,-1.63052 -0.0905,-1.63053 3.0427,-0.60274 3.04271,-0.60275 0.8599,-0.0157 0.85989,-0.0157 v 0.24676 0.24675 l -0.49584,0.15738 -0.49585,0.15737 0.13358,1.24952 0.13357,1.24951 0.22672,0.28777 0.22672,0.28776 -0.66147,0.35401 -0.66147,0.35401 0.17039,0.94573 0.17039,0.94572 0.23907,0.46303 0.23906,0.46302 h 0.35517 0.35517 l 0.33051,-0.39825 0.33051,-0.39824 -0.13165,-1.37013 -0.13165,-1.37013 0.3627,0.49602 0.36271,0.49603 v 0.94889 0.9489 l -0.41188,0.58803 -0.41188,0.58804 -0.84489,-0.035 -0.84489,-0.0349 z m 3.63802,-1.7272 0.8599,-0.33703 v -0.33383 -0.33383 l -0.64236,-0.16122 -0.64237,-0.16122 -0.54826,0.17401 -0.54826,0.17401 v 0.22158 0.22158 l -1.01095,-0.1356 -1.01095,-0.1356 -0.423,0.423 -0.42299,0.42299 -0.81501,-0.163 -0.81502,-0.163 v 0.28008 0.28008 l 0.72761,0.12673 0.7276,0.12674 1.85209,-0.0947 1.85208,-0.0947 z m -11.04926,-0.55175 -0.003,-0.33073 -0.164,-0.99218 -0.164,-0.99219 h -0.36226 -0.36225 v 0.49609 0.4961 l 0.16536,0.82682 0.16537,0.82682 h 0.3638 0.3638 z m 8.68064,-2.51354 0.0788,-1.65364 h -0.3654 -0.36541 l -0.20029,0.19843 -0.2003,0.19844 h -0.5714 -0.57141 l 0.0461,1.29492 0.0461,1.29492 0.35076,0.22883 0.35077,0.22883 0.66146,-0.0685 0.66146,-0.0685 z m -5.28832,0.54962 -0.0821,-0.97173 -0.36756,-0.12093 -0.36755,-0.12092 0.17647,0.28554 0.17647,0.28554 -0.95068,0.17835 -0.95069,0.17835 1.00948,0.62051 1.00948,0.62051 0.21441,0.008 0.21441,0.008 z m 7.31377,0.4001 0.6739,-0.30705 v -1.25214 -1.25214 l -0.3884,-0.14905 -0.3884,-0.14904 -0.14103,0.22819 -0.14103,0.22819 -0.52568,-0.13747 -0.52569,-0.13747 -0.16506,0.43014 -0.16507,0.43014 0.17806,1.18738 0.17806,1.18737 h 0.36821 0.36822 z m 1.68414,-2.16422 -0.0842,-0.9535 -0.36561,0.2282 -0.36562,0.22821 0.18563,0.98948 0.18563,0.98947 0.26418,-0.26418 0.26418,-0.26417 z m -7.82338,0.28846 0.11012,-0.33073 0.49882,-0.0967 0.49882,-0.0967 -0.35471,0.42739 -0.3547,0.42739 h -0.25423 -0.25424 z"
           id="path216" /><path
           style="fill:#8c8c8c;fill-opacity:1"
           d="m 275.83263,111.15773 -5.42857,-0.45359 -1.23807,-0.18566 -1.23806,-0.18566 -0.1567,-1.24267 -0.1567,-1.24268 -0.11537,-0.7276 -0.11536,-0.7276 0.5887,0.0209 0.5887,0.0209 -0.33073,0.13345 -0.33073,0.13346 0.004,0.70555 0.004,0.70556 0.15954,0.59531 0.15954,0.59531 h 0.40244 0.40245 l -0.16585,-1.41111 -0.16585,-1.41111 0.32786,-0.0104 0.32786,-0.0105 0.26458,-0.065 0.26458,-0.065 0.39688,0.0354 0.39687,0.0354 -0.36654,0.23213 -0.36654,0.23214 0.16474,0.65636 0.16474,0.65636 0.73097,0.27328 0.73097,0.27327 0.41173,0.12911 0.41173,0.12911 -0.0656,-1.62566 -0.0656,-1.62566 0.27229,1.65364 0.27228,1.65365 h 0.74901 0.74901 l 0.42804,-0.16425 0.42804,-0.16426 -0.12877,-1.62168 -0.12876,-1.62169 0.27318,1.64271 0.27318,1.6427 0.83825,-0.12045 0.83825,-0.12045 -0.8599,0.27125 -0.8599,0.27125 v 0.20389 0.20389 l -0.86094,-0.10051 -0.86094,-0.10051 -0.60571,0.52532 -0.6057,0.52533 1.00362,0.14659 1.00363,0.14659 2.16604,0.16924 2.16605,0.16923 0.92631,-0.30571 0.92632,-0.30571 0.11809,-0.44795 0.1181,-0.44795 0.0307,0.5 0.0307,0.5 0.46302,0.35148 0.46303,0.35149 0.43092,0.008 0.43092,0.008 0.31193,-0.75308 0.31193,-0.75307 -0.16424,-0.76828 -0.16424,-0.76828 0.31108,0.49276 0.31107,0.49277 -0.14928,0.9199 -0.14928,0.91991 -0.30978,0.37327 -0.30979,0.37326 -0.8275,-0.0363 -0.82749,-0.0363 z m -6.18554,-4.16464 -0.15985,-0.15985 -0.15879,0.15878 -0.15878,0.15879 0.20722,0.3353 0.20723,0.3353 0.11141,-0.33423 0.11141,-0.33424 z m 8.05262,1.66066 -0.33977,-0.4094 h 0.27941 0.27941 l 0.09,-0.7276 0.0901,-0.72761 0.14538,0.85374 0.14539,0.85374 -0.17507,0.28327 -0.17506,0.28326 z m 2.795,-0.36529 -0.13626,-0.22047 -0.87154,0.0878 -0.87155,0.0878 0.26459,-0.10873 0.26458,-0.10873 0.7276,-0.16047 0.72761,-0.16048 0.0168,-0.72256 0.0168,-0.72257 0.23929,0.59532 0.23928,0.59531 h 0.25471 0.25471 l 0.12547,-0.59531 0.12547,-0.59532 -0.0409,0.92605 -0.0409,0.92604 -0.46017,-0.0363 -0.46017,-0.0363 0.14505,0.23471 0.14506,0.23471 h -0.26458 -0.26458 z m -2.76361,-2.68994 v -0.66146 l 0.13345,0.33073 0.13345,0.33073 -0.13345,0.33073 -0.13345,0.33072 z m 2.37802,-1.14418 -0.31162,-0.37548 0.79464,-0.15893 0.79464,-0.15893 0.59867,0.24053 0.59866,0.24053 -0.52916,0.0481 -0.52917,0.0481 -0.3687,-0.0517 -0.36871,-0.0517 -0.18382,0.29743 -0.18381,0.29742 z"
           id="path215" /><path
           style="fill:#7a7a7a;fill-opacity:1"
           d="m 281.2612,111.54805 -0.26459,-0.0941 -5.95312,-0.44654 -5.95313,-0.44654 -0.59531,-0.22566 -0.59531,-0.22567 v -0.51095 -0.51094 l 0.52916,0.13838 0.52917,0.13838 0.0396,-1.15534 0.0396,-1.15534 0.113,0.79375 0.11301,0.79375 0.26862,0.26459 0.26861,0.26458 -0.0905,-1.38923 -0.0905,-1.38922 0.17738,1.6e-4 0.17738,1.7e-4 0.18075,1.68785 0.18075,1.68786 0.43562,-0.0844 0.43562,-0.0844 0.7276,-0.15327 0.72761,-0.15327 0.0313,-0.72256 0.0313,-0.72257 0.18385,0.79375 0.18386,0.79375 -0.0961,0.29151 -0.0961,0.2915 -0.58206,-0.11019 -0.58205,-0.11019 -0.66146,0.26494 -0.66146,0.26493 0.66146,0.0247 0.66146,0.0247 4.49791,0.37106 4.49792,0.37105 0.0882,-0.24666 0.0882,-0.24667 h 0.37482 0.37483 v 0.23628 0.23627 l 0.40288,0.1546 0.40287,0.1546 0.52317,-0.52317 0.52316,-0.52316 v 0.24568 0.24568 l -0.41577,0.41578 -0.41577,0.41577 -0.57642,-0.0209 -0.57641,-0.0209 z m 2.26984,-1.87054 0.0209,-0.50712 0.13896,0.34727 0.13897,0.34726 -0.15985,0.15985 -0.15986,0.15986 z m -8.29245,-0.30868 -0.1007,-0.19844 0.18608,-0.79375 0.18608,-0.79375 0.0313,0.99219 0.0313,0.99219 h -0.11667 -0.11668 z m 2.78204,-1.25677 0.005,-1.05834 0.11506,0.5984 0.11507,0.5984 -0.12041,0.45994 -0.1204,0.45993 z m -10.3339,0 0.01,-0.79375 0.12197,0.46805 0.12197,0.46806 -0.13178,0.32569 -0.13177,0.3257 z m 12.87084,0.25155 -0.13906,-0.25155 0.19653,-0.66146 0.19653,-0.66146 0.0264,0.49388 0.0264,0.49388 0.52917,-0.13838 0.52916,-0.13838 v 0.23981 0.23982 h -0.50711 -0.50712 l -0.1059,0.31769 -0.1059,0.3177 z m -8.10834,-1.30989 0.01,-0.79375 0.12197,0.46806 0.12197,0.46806 -0.13178,0.32569 -0.13177,0.32569 z m 7.62134,-2.77812 v -0.26458 l 0.59531,0.004 0.59532,0.004 -0.39688,0.25648 -0.39687,0.25648 -0.19844,0.004 -0.19844,0.004 z"
           id="path214" /><path
           style="fill:#686868;fill-opacity:1"
           d="m 280.33515,111.41935 -1.19062,-0.18511 0.66146,-0.0434 0.66146,-0.0433 0.52916,-0.14135 0.52917,-0.14135 0.52917,0.40113 0.52916,0.40113 -0.52916,-0.0313 -0.52917,-0.0313 z m -3.77031,-0.45598 0.8599,-0.10671 0.85989,0.10671 0.8599,0.10671 h -1.71979 -1.71979 z m -5.62239,-0.26225 -1.5875,-0.089 -0.39688,-0.16884 -0.39687,-0.16884 -0.26096,-0.0228 -0.26096,-0.0229 -0.0892,-0.46302 -0.0892,-0.46302 h 0.54856 0.54857 l 0.0375,-0.85989 0.0375,-0.8599 0.16089,1.03765 0.1609,1.03765 0.31164,0.10252 0.31164,0.10251 0.11173,-0.74329 0.11174,-0.74329 0.0396,0.96844 0.0396,0.96843 2.3151,0.17144 2.31511,0.17143 0.39687,0.0862 0.39688,0.0862 -1.5875,-0.0193 -1.5875,-0.0193 z m 1.78117,-1.39844 v -0.92604 l 0.121,0.46302 0.121,0.46302 -0.121,0.46302 -0.121,0.46302 z m 2.60534,-0.15434 0.0209,-0.50712 0.13896,0.34727 0.13897,0.34727 -0.15986,0.15985 -0.15985,0.15985 z m 2.64583,-0.52916 0.0209,-0.50712 0.13896,0.34726 0.13897,0.34727 -0.15985,0.15985 -0.15986,0.15985 z m 2.64584,-0.52917 0.0209,-0.50712 0.13897,0.34727 0.13896,0.34726 -0.15985,0.15985 -0.15985,0.15986 z m -10.82703,-0.37483 v -0.66146 l 0.13345,0.33073 0.13345,0.33073 -0.13345,0.33073 -0.13345,0.33073 z m 10.471,-3.47241 0.32632,-0.32877 0.14811,0.14811 0.14811,0.14812 -0.47443,0.18065 -0.47443,0.18065 z"
           id="path213" /><path
           style="fill:#575757;fill-opacity:1"
           d="m 281.40115,111.42968 -0.38921,-0.24614 0.19707,-0.19708 0.19708,-0.19707 0.44727,0.44727 0.44727,0.44727 -0.25513,-0.004 -0.25514,-0.004 z m -12.31079,-1.06866 -0.16352,-0.26459 h -0.51355 -0.51355 v -0.24675 -0.24675 l 0.56793,-0.18026 0.56793,-0.18025 0.24718,0.44168 0.24717,0.44168 0.37552,-0.31166 0.37552,-0.31165 v 0.4117 0.4117 l 0.7276,0.11022 0.72761,0.11022 -1.24116,0.0396 -1.24116,0.0396 z"
           id="path212" /><path
           style="fill:#454545;fill-opacity:1"
           d="m 281.1289,111.15477 v -0.26459 h 0.24897 0.24897 l 0.16352,0.26459 0.16352,0.26458 h -0.41249 -0.41249 z m -12.23698,-0.87385 -0.99218,-0.27781 v -0.18708 -0.18708 l 0.66146,-0.12644 0.66145,-0.12645 v 0.39105 0.39104 l 0.52917,-0.13838 0.52917,-0.13838 v 0.3721 0.37211 l -0.19844,-0.0334 -0.19844,-0.0334 z"
           id="path211" /><path
           style="fill:#333333;fill-opacity:1"
           d="m 281.1289,111.15477 v -0.26459 h 0.24897 0.24897 l 0.16352,0.26459 0.16352,0.26458 h -0.41249 -0.41249 z m -12.7,-1.121 -0.66145,-0.2937 0.63153,-0.10955 0.63154,-0.10955 0.16221,0.25712 0.16222,0.25713 0.52916,0.1322 0.52917,0.13221 -0.66146,0.0139 -0.66146,0.0139 z"
           id="path210" /></g><path
         id="shape"
         style="opacity:0.61791;fill:none;fill-opacity:1;stroke:#000000;stroke-width:0.4;stroke-linejoin:bevel;stroke-dasharray:none"
         d="m 281.28488,103.74639 -0.14883,0.0289 -0.13952,0.003 -3.04271,0.60255 -3.04271,0.60306 v 0.003 l -0.31368,0.061 0.0326,-0.0393 -0.49919,0.0966 -0.49868,0.0966 -0.0119,0.0357 -0.34468,0.0672 0.0481,-0.0584 -0.66146,0.1571 -0.47904,0.11368 -0.002,5.2e-4 -4.54701,0.88418 -0.25063,-0.009 0.009,0.0563 -0.032,0.006 0.002,0.0114 0.0496,0.44132 0.0248,0.22065 0.0775,0.68472 5.1e-4,0.006 0.15245,1.35186 0.1142,0.56689 -0.014,0.003 0.016,0.007 0.1142,0.56585 0.0284,0.005 0.002,0.0155 0.92811,0.13901 0.2341,0.0889 0.1297,0.01 0.0341,0.0548 0.21601,-0.007 0.50333,0.0284 1.4981,0.24082 4.89479,0.36328 4.89479,0.36329 0.21032,0.009 0.0543,0.0191 0.22376,0.008 0.0408,0.0258 0.25528,0.004 0.25528,0.004 -0.0139,-0.014 0.3917,0.014 0.0109,-0.0109 0.22737,0.0103 5.2e-4,-10e-4 0.0336,0.002 0.18655,-0.26665 0.004,-0.005 0.0858,-0.10284 0.30954,-0.3731 0.0186,-0.11524 v -5.2e-4 l 0.21962,-0.31316 V 109.922 l 0.0553,-0.0553 -0.0553,-0.13798 v -0.10387 -0.0641 -0.0904 l 0.0605,-0.37155 -0.0605,-0.0956 v -0.26252 -0.12868 l -0.2558,-0.34984 -5.1e-4,-5.2e-4 -0.0176,-0.0331 -0.27389,-0.5116 h -0.10697 l -0.0708,-0.0971 0.009,0.0971 h -0.0811 -0.10542 -0.14417 -0.21084 l -0.10129,-0.12764 0.0326,-0.0346 -0.23048,-0.2496 -0.19379,-0.20929 -10e-4,-0.001 -0.031,-0.0393 -0.13332,-1.24954 -0.13384,-1.24953 0.49609,-0.1571 0.49558,-0.15761 v -0.2465 -0.24701 H 282.001 Z"
         transform="translate(48.493439,0.45965345)" /></g></g>


<script type="text/javascript">
  <![CDATA[
    // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
    let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#ffffff';
    let _pc_state1Colour     = '#00ff00';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    let _pn_strokeWidth      = 1;     
    let _pn_opacity          = 0.60;  
    let _pn_indicationMode   = 0;     
    //!export-end
    
    // Internal state variables
    let stateNumber = 0;
    let isBlinking = false;
    let myCheckInterval;
    
    // Force global timing mechanism by using epoch time
    function getGlobalBlinkState(interval) {
      // Use the current time divided by interval, which will give
      // the same result for all SVGs at the same moment
      return Math.floor(Date.now() / interval) % 2 === 0;
    }
    
    // Function to update the color based on the set state
    function logic() {
      switch (stateNumber) {
        case 0: // off
          setColors(_pc_state0Colour);
          stopBlinking();
          break; 
        case 1: // run
          setColors(_pc_state1Colour);
          stopBlinking();
          break;
        case 2: // warning
          setColors(_pc_state2Colour);
          stopBlinking();
          break;
        case 3: // fault
          startForceSync();
          break;
        case 4: // invalid 
          setColors(_pc_state4Colour);
          stopBlinking();
          break;
        case 5: // spare
          setColors(_pc_state5Colour);
          stopBlinking();
          break;
        default:
          console.log('Undefined State');
          stopBlinking();
      }
    }

    // Initial setup
    function init() {
      // Set up visibility change listener
      document.addEventListener('visibilitychange', handleVisibilityChange);
      
      // Initial state rendering
      logic(); 
    }
    
    // Handler for tab visibility changes
    function handleVisibilityChange() {
      if (document.visibilityState === 'visible' && isBlinking) {
        // Resume checking when tab becomes visible again
        startForceSync();
      } else if (document.visibilityState === 'hidden' && isBlinking) {
        // Pause checking when tab is hidden
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
    }
    
    // Update the blinking display based on global time
    function updateBlinkDisplay() {
      if (!isBlinking) return;
      
      // Get the global blink state
      const showFaultColor = getGlobalBlinkState(_pn_setInterval);
      
      // Set the appropriate color
      if (showFaultColor) {
        setColors(_pc_state3Colour);
      } else {
        setColors(_pc_state0Colour);
      }
    }
    
    // Start forced synchronization
    function startForceSync() {
      // Clear any existing interval
      stopBlinking();
      
      // Set blinking state
      isBlinking = true;
      
      // Update display immediately
      updateBlinkDisplay();
      
      // Check very frequently to ensure tight synchronization (every 16ms = ~60fps)
      myCheckInterval = setInterval(updateBlinkDisplay, 16);
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
      if (id === '_pn_setInterval')    _pn_setInterval    = value;
      if (id === '_pc_state0Colour')   _pc_state0Colour   = value;
      if (id === '_pc_state1Colour')   _pc_state1Colour   = value;
      if (id === '_pc_state2Colour')   _pc_state2Colour   = value;
      if (id === '_pc_state3Colour')   _pc_state3Colour   = value;
      if (id === '_pc_state4Colour')   _pc_state4Colour   = value;
      if (id === '_pc_state5Colour')   _pc_state5Colour   = value;
      if (id === '_pn_lightShade')     _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade')      _pn_darkShade      = value;
      if (id === '_pn_shadowShade')    _pn_shadowShade    = value;
      if (id === '_pn_strokeWidth')    _pn_strokeWidth    = value;
      if (id === '_pn_opacity')        _pn_opacity        = value;
      if (id === '_pn_indicationMode') _pn_indicationMode = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Function to update the fill and/or stroke color based on indication mode
    function setColors(color) {
      // Get the single element with ID "shape"
      const shapeElement = document.getElementById('shape');
      if (!shapeElement) return; // Safety check
      
      // Set opacity
      shapeElement.style.opacity = _pn_opacity;
      
      // Set stroke width
      shapeElement.style.strokeWidth = _pn_strokeWidth;
      
      // Apply colors based on indication mode
      switch(_pn_indicationMode) {
        case 0: // Fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
          break;
        case 1: // Stroke only
          shapeElement.style.fill = "none";
          shapeElement.style.stroke = color;
          break;
        case 2: // Both fill and stroke
          shapeElement.style.fill = color;
          shapeElement.style.stroke = color;
          break;
        default:
          // Default to fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
      }
    }

    // Function to stop blinking
    function stopBlinking() {
      if (myCheckInterval) {
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
      isBlinking = false;
    }

    // Clean up event listeners when widget is destroyed
    function cleanup() {
      stopBlinking();
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    }

    // Initialize the SVG
    init();

    // Ensure cleanup when SVG is removed
    const cleanupObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.removedNodes.forEach((node) => {
          if (node.id === 'Layer_1') {
            cleanup();
            cleanupObserver.disconnect();
          }
        });
      });
    });
    cleanupObserver.observe(document.body, { childList: true, subtree: true });
  ]]>
  </script>
</svg>
