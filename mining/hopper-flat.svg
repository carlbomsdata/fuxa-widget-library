<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="21.377571mm"
   height="38.577553mm"
   viewBox="0 0 21.377571 38.577553"
   version="1.1"
   id="Layer_1"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs1" /><g
     id="layer24"
     transform="translate(-321.34857,-234.80912)"><g
       id="g123"><g
         id="g52"
         transform="translate(54.081573,-0.36174965)"><path
           style="fill:#d4d4d4;fill-opacity:1"
           d="m 267.77167,254.45642 v -18.78541 h 10.18646 10.18645 v 18.78541 18.78542 h -10.18645 -10.18646 z"
           id="path62" /><path
           style="fill:#c2c2c2;fill-opacity:1"
           d="m 267.77167,254.45642 v -18.78541 h 10.18646 10.18645 v 18.78541 18.78542 h -10.18645 -10.18646 z"
           id="path60" /><path
           style="fill:#b0b0b0;fill-opacity:1"
           d="m 267.77167,254.45642 v -18.78541 h 10.18646 10.18645 v 18.78541 18.78542 h -10.18645 -10.18646 z"
           id="path59" /><path
           style="fill:#9e9e9e;fill-opacity:1"
           d="m 267.77167,254.45642 v -18.78541 h 10.18646 10.18645 v 18.78541 18.78542 h -10.18645 -10.18646 z"
           id="path58" /><path
           style="fill:#8c8c8c;fill-opacity:1"
           d="m 267.77167,254.45642 v -18.78541 h 10.18646 10.18645 v 18.78541 18.78542 h -10.18645 -10.18646 z m 5.49738,17.31521 0.58803,-0.41188 v -0.38187 -0.38187 h -0.20843 -0.20843 l -0.87862,-0.73351 -0.87863,-0.73351 0.4256,-1.01859 0.4256,-1.0186 v -0.76144 -0.76144 h -0.22117 -0.22116 l -1.20078,-0.93552 -1.20079,-0.93552 -0.71749,0.32691 -0.7175,0.32691 0.16107,0.93934 0.16107,0.93934 0.15905,2.475 0.15906,2.47501 1.09172,0.49575 1.09171,0.49575 0.80102,0.006 0.80103,0.006 z m 10.24533,-0.21452 2.64583,0.009 0.7276,0.20744 0.72761,0.20744 0.0197,-17.4272 0.0197,-17.4272 0.11097,-0.59531 0.11097,-0.59531 h -9.78792 -9.78793 v 0.52917 0.52916 l 0.52917,0.52917 0.52917,0.52917 v 5.42395 5.42396 h -0.28716 -0.28716 l 0.15194,1.65365 0.15194,1.65364 0.15779,1.78594 0.1578,1.78594 H 269.11716 268.83 v 1.34834 1.34834 l 0.41565,1.42979 0.41565,1.42978 h 0.38741 0.38741 l 0.71829,0.44453 0.7183,0.44452 0.8599,0.798 0.85989,0.798 v 1.78988 1.78987 l 0.47507,0.47333 0.47507,0.47333 0.31868,0.74005 0.31868,0.74006 v 0.64396 0.64397 l 0.59893,0.15032 0.59893,0.15032 1.3193,0.23198 1.3193,0.23197 0.92604,-0.16559 0.92604,-0.1656 z m -2.51355,-2.01944 v -0.26458 h -0.33362 -0.33362 l -0.99101,-0.8599 -0.99102,-0.85989 0.002,-0.59531 0.002,-0.59532 h 0.50723 0.50723 l 1.17037,0.50168 1.17037,0.50168 -0.068,0.6228 -0.0681,0.6228 -0.022,0.59531 -0.0221,0.59532 h -0.26458 -0.26459 z m -2.28422,-7.12207 -0.82901,-0.50551 -0.42776,-0.6107 -0.42776,-0.61071 v -0.4703 -0.47029 h 0.61196 0.61196 l 0.68307,0.7276 0.68307,0.72761 0.1812,0.85989 0.18121,0.8599 -0.21946,-9.9e-4 -0.21946,-9.9e-4 z m 5.65766,0.32511 -0.46302,-0.121 v -0.24519 -0.24518 h -0.37599 -0.37598 l -1.14537,-1.14697 -1.14537,-1.14697 -0.37522,-0.70472 -0.37523,-0.70471 0.19899,-0.19884 0.19898,-0.19883 1.10229,-0.006 1.10228,-0.006 0.52916,0.57954 0.52917,0.57953 0.60573,0.71751 0.60574,0.7175 -0.0599,1.15645 -0.0599,1.15645 -0.0167,-0.0307 -0.0167,-0.0307 z m -9.81912,-3.65408 -0.15229,-0.39687 h -0.40518 -0.40518 l -1.60404,-1.60404 -1.60403,-1.60404 0.10675,-0.31419 0.10675,-0.31419 1.16656,0.0811 1.16655,0.0811 1.12448,1.16024 1.12448,1.16024 v 1.07373 1.07374 h -0.23627 -0.23628 z m 4.06443,-3.89649 -0.92604,-0.58028 -0.20006,-0.32072 -0.20007,-0.32071 -2.58894,-1.71255 -2.58894,-1.71256 -0.71672,-1.03423 -0.71673,-1.03424 v -0.44027 -0.44027 l 0.46911,0.18991 0.4691,0.18991 1.53792,0.92604 1.53792,0.92604 0.52879,0.30009 0.5288,0.30009 0.29522,0.29522 0.29523,0.29523 h 0.74342 0.74342 l 0.46043,0.56453 0.46044,0.56452 0.6884,0.72741 0.6884,0.72741 -0.0668,0.75858 -0.0668,0.75859 -0.0262,0.33073 -0.0263,0.33073 -0.19844,-0.004 -0.19843,-0.004 z m 6.09511,-3.43212 -1.1109,-1.1109 -0.50773,-0.99523 -0.50773,-0.99522 v -0.97288 -0.97287 l -1.19062,-1.80726 -1.19063,-1.80725 v -0.40541 -0.40541 h 0.95258 0.95257 l 1.20769,1.19062 1.20768,1.19063 h 0.22713 0.22712 l -0.0625,1.88335 -0.0625,1.88335 0.54004,0.43731 0.54005,0.4373 0.4424,1.29835 0.44239,1.29835 v 0.48204 0.48203 h -0.49804 -0.49804 z m -9.68353,-5.61097 -1.30637,-0.8835 -0.80581,-1.02596 -0.80581,-1.02596 0.0976,-0.46302 0.0976,-0.46302 0.8405,0.002 0.8405,0.002 0.69254,0.46127 0.69254,0.46128 0.74996,0.89546 0.74997,0.89546 0.0518,0.74824 0.0518,0.74823 -0.32023,0.26577 -0.32023,0.26577 z m 9.70575,-6.507 -1.09024,-1.05804 v -0.37512 -0.37512 l 0.28089,-0.0936 0.28089,-0.0936 1.01469,0.0968 1.01469,0.0968 0.32045,1.14454 0.32045,1.14454 -0.17644,0.28548 -0.17644,0.28549 h -0.34935 -0.34936 z m -7.17566,0.132 -0.32938,-0.39688 -0.29833,-0.0108 -0.29833,-0.0108 -0.86859,-0.74339 -0.8686,-0.74338 0.42606,-0.35359 0.42606,-0.3536 1.23628,0.32945 1.23629,0.32946 0.23159,0.22935 0.23159,0.22934 -0.17743,0.94581 -0.17744,0.9458 h -0.22019 -0.2202 z"
           id="path57" /><path
           style="fill:#7a7a7a;fill-opacity:1"
           d="m 267.77167,254.45642 v -18.78541 h 10.18646 10.18645 v 18.78541 18.78542 h -10.18645 -10.18646 z m 20.10806,-0.19843 2.7e-4,-18.3224 -9.85573,-4e-5 -9.85573,-3e-5 0.0697,17.94541 0.0698,17.9454 0.85629,0.4144 0.85629,0.4144 8.92941,-0.0374 8.92941,-0.0374 z"
           id="path56" /><path
           style="fill:#686868;fill-opacity:1"
           d="m 267.77167,254.45642 v -18.78541 h 10.18646 10.18645 v 18.78541 18.78542 H 277.95813 267.77167 Z M 287.88,254.32413 v -18.38854 h -9.92187 -9.92188 v 17.56172 17.56172 l 0.16537,0.82682 0.16536,0.82682 h 9.75651 9.75651 z"
           id="path55" /><path
           style="fill:#575757;fill-opacity:1"
           d="m 267.89454,272.9143 -0.12755,-0.33392 0.0703,-18.38854 0.0703,-18.38854 0.0643,18.45469 0.0643,18.45468 0.8599,0.051 0.85989,0.051 9.06006,0.0152 9.06007,0.0152 0.0708,-18.12396 0.0708,-18.12396 -0.003,18.25625 -0.003,18.25625 -9.9951,0.0693 -9.9951,0.0693 z"
           id="path54" /><path
           style="fill:#454545;fill-opacity:1"
           d="m 267.89331,272.91111 -0.12632,-0.33073 0.0703,-18.38854 0.0703,-18.38854 0.0643,18.5838 0.0643,18.58379 9.98802,0.0726 9.98802,0.0726 -9.99632,0.0629 -9.99633,0.0629 z"
           id="path53" /><path
           style="fill:#333333;fill-opacity:1"
           d="m 267.89329,272.91111 -0.12636,-0.33073 0.0704,-17.85937 0.0704,-17.85938 0.0642,18.05459 0.0643,18.0546 9.85573,0.0727 9.85573,0.0727 -9.86403,0.0628 -9.86404,0.0628 z"
           id="path52" /></g><g
         id="g122"
         transform="translate(54.081573,-0.36174965)"><path
           id="shape"
           style="opacity:0.614925;fill:none;fill-opacity:1;stroke:#000000;stroke-linejoin:bevel"
           d="m 267.77165,235.6709 v 18.78542 16.90698 l -0.005,1.21698 0.005,0.0124 v 0.64905 h 0.24753 l 0.003,0.007 0.96945,-0.007 h 8.9669 10.18646 V 254.45632 235.6709 h -10.18646 z" /></g></g></g>


<script type="text/javascript">
  <![CDATA[
    // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
    let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#ffffff';
    let _pc_state1Colour     = '#00ff00';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    let _pn_strokeWidth      = 1;     
    let _pn_opacity          = 0.60;  
    let _pn_indicationMode   = 0;     
    //!export-end
    
    // Internal state variables
    let stateNumber = 0;
    let isBlinking = false;
    let myCheckInterval;
    
    // Force global timing mechanism by using epoch time
    function getGlobalBlinkState(interval) {
      // Use the current time divided by interval, which will give
      // the same result for all SVGs at the same moment
      return Math.floor(Date.now() / interval) % 2 === 0;
    }
    
    // Function to update the color based on the set state
    function logic() {
      switch (stateNumber) {
        case 0: // off
          setColors(_pc_state0Colour);
          stopBlinking();
          break; 
        case 1: // run
          setColors(_pc_state1Colour);
          stopBlinking();
          break;
        case 2: // warning
          setColors(_pc_state2Colour);
          stopBlinking();
          break;
        case 3: // fault
          startForceSync();
          break;
        case 4: // invalid 
          setColors(_pc_state4Colour);
          stopBlinking();
          break;
        case 5: // spare
          setColors(_pc_state5Colour);
          stopBlinking();
          break;
        default:
          console.log('Undefined State');
          stopBlinking();
      }
    }

    // Initial setup
    function init() {
      // Set up visibility change listener
      document.addEventListener('visibilitychange', handleVisibilityChange);
      
      // Initial state rendering
      logic(); 
    }
    
    // Handler for tab visibility changes
    function handleVisibilityChange() {
      if (document.visibilityState === 'visible' && isBlinking) {
        // Resume checking when tab becomes visible again
        startForceSync();
      } else if (document.visibilityState === 'hidden' && isBlinking) {
        // Pause checking when tab is hidden
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
    }
    
    // Update the blinking display based on global time
    function updateBlinkDisplay() {
      if (!isBlinking) return;
      
      // Get the global blink state
      const showFaultColor = getGlobalBlinkState(_pn_setInterval);
      
      // Set the appropriate color
      if (showFaultColor) {
        setColors(_pc_state3Colour);
      } else {
        setColors(_pc_state0Colour);
      }
    }
    
    // Start forced synchronization
    function startForceSync() {
      // Clear any existing interval
      stopBlinking();
      
      // Set blinking state
      isBlinking = true;
      
      // Update display immediately
      updateBlinkDisplay();
      
      // Check very frequently to ensure tight synchronization (every 16ms = ~60fps)
      myCheckInterval = setInterval(updateBlinkDisplay, 16);
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
      if (id === '_pn_setInterval')    _pn_setInterval    = value;
      if (id === '_pc_state0Colour')   _pc_state0Colour   = value;
      if (id === '_pc_state1Colour')   _pc_state1Colour   = value;
      if (id === '_pc_state2Colour')   _pc_state2Colour   = value;
      if (id === '_pc_state3Colour')   _pc_state3Colour   = value;
      if (id === '_pc_state4Colour')   _pc_state4Colour   = value;
      if (id === '_pc_state5Colour')   _pc_state5Colour   = value;
      if (id === '_pn_lightShade')     _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade')      _pn_darkShade      = value;
      if (id === '_pn_shadowShade')    _pn_shadowShade    = value;
      if (id === '_pn_strokeWidth')    _pn_strokeWidth    = value;
      if (id === '_pn_opacity')        _pn_opacity        = value;
      if (id === '_pn_indicationMode') _pn_indicationMode = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Function to update the fill and/or stroke color based on indication mode
    function setColors(color) {
      // Get the single element with ID "shape"
      const shapeElement = document.getElementById('shape');
      if (!shapeElement) return; // Safety check
      
      // Set opacity
      shapeElement.style.opacity = _pn_opacity;
      
      // Set stroke width
      shapeElement.style.strokeWidth = _pn_strokeWidth;
      
      // Apply colors based on indication mode
      switch(_pn_indicationMode) {
        case 0: // Fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
          break;
        case 1: // Stroke only
          shapeElement.style.fill = "none";
          shapeElement.style.stroke = color;
          break;
        case 2: // Both fill and stroke
          shapeElement.style.fill = color;
          shapeElement.style.stroke = color;
          break;
        default:
          // Default to fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
      }
    }

    // Function to stop blinking
    function stopBlinking() {
      if (myCheckInterval) {
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
      isBlinking = false;
    }

    // Clean up event listeners when widget is destroyed
    function cleanup() {
      stopBlinking();
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    }

    // Initialize the SVG
    init();

    // Ensure cleanup when SVG is removed
    const cleanupObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.removedNodes.forEach((node) => {
          if (node.id === 'Layer_1') {
            cleanup();
            cleanupObserver.disconnect();
          }
        });
      });
    });
    cleanupObserver.observe(document.body, { childList: true, subtree: true });
  ]]>
  </script>
</svg>
