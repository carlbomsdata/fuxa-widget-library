<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="27.479265mm"
   height="43.894382mm"
   viewBox="0 0 27.479265 43.894382"
   version="1.1"
   id="Layer_1"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs1" /><g
     id="layer28-2"
     transform="translate(-339.19684,-285.23799)"><g
       id="g182"><g
         id="g126"
         transform="translate(68.551559,-1.2661238)"><path
           style="fill:#c2c2c2;fill-opacity:1"
           d="m 297.56205,319.98827 v -9.87846 l -0.17539,-11.55279 -0.1754,-11.55279 h -5.51193 -5.51194 l -7.54499,3.76973 -7.54498,3.76973 0.18775,0.39746 0.18776,0.39746 -0.0858,17.26406 -0.0858,17.26406 h 0.95956 0.95956 v -9.86567 -9.86568 l 1.33765,-1.31297 1.33764,-1.31297 1.08872,1.19063 1.08873,1.19062 1.29901,1.38906 1.29902,1.38907 4.01368,-0.003 4.01368,-0.003 2.22779,-2.52204 2.22779,-2.52203 1.27794,1.25872 1.27794,1.25872 v 9.86568 9.86567 h 0.92604 0.92604 z m -2.57367,-14.39104 0.72159,-0.72159 v 1.44318 1.44318 l -0.72159,-0.72159 -0.72159,-0.72159 z m -21.768,0.53979 v -1.50471 l 0.79484,0.7615 0.79483,0.7615 -0.71204,0.74321 -0.71205,0.74321 h -0.0828 -0.0828 z"
           id="path143" /><path
           style="fill:#b0b0b0;fill-opacity:1"
           d="m 297.56205,319.98827 v -9.87846 l -0.17539,-11.55279 -0.1754,-11.55279 h -5.51193 -5.51194 l -7.54499,3.76973 -7.54498,3.76973 0.18775,0.39746 0.18776,0.39746 -0.0858,17.26406 -0.0858,17.26406 h 0.95956 0.95956 v -9.86567 -9.86568 l 1.33765,-1.31297 1.33764,-1.31297 1.08872,1.19063 1.08873,1.19062 1.29901,1.38906 1.29902,1.38907 4.01368,-0.003 4.01368,-0.003 2.22779,-2.52204 2.22779,-2.52203 1.27794,1.25872 1.27794,1.25872 v 9.86568 9.86567 h 0.92604 0.92604 z m -2.57367,-14.39104 0.72159,-0.72159 v 1.44318 1.44318 l -0.72159,-0.72159 -0.72159,-0.72159 z m -21.768,0.53979 v -1.50471 l 0.79484,0.7615 0.79483,0.7615 -0.71204,0.74321 -0.71205,0.74321 h -0.0828 -0.0828 z m 20.37292,-11.08504 v -7.03351 l 0.33073,0.11012 0.33073,0.11012 0.0705,6.92339 0.0705,6.92338 h -0.40127 -0.40127 z m -4.53822,-0.0441 -0.0403,-4.16719 -0.0615,-0.26458 -0.0615,-0.26458 -0.0305,-0.37174 -0.0305,-0.37174 -0.52917,0.47889 -0.52916,0.47889 v -1.06931 -1.06931 l 0.85989,-0.13082 0.8599,-0.13081 0.19844,0.1164 0.19843,0.1164 -0.002,3.62241 -0.002,3.6224 -0.16867,1.78594 -0.16867,1.78594 h -0.22632 -0.22633 z m -10.04761,1.07369 -0.36313,-0.44766 0.39688,0.22189 0.39687,0.2219 -0.33073,-0.35632 -0.33073,-0.35631 v -1.65757 -1.65756 l 0.54267,-0.29043 0.54267,-0.29043 -0.0472,2.53008 -0.0472,2.53007 h -0.19853 -0.19853 z m 4.28476,-3.07138 -0.0337,-3.25445 0.94306,-0.44971 0.94305,-0.44971 h 0.12331 0.12332 v 0.39687 0.39688 l -0.32411,-0.0662 -0.32411,-0.0661 -0.20774,2.51354 -0.20775,2.51354 -0.45436,0.85989 -0.45435,0.8599 h -0.0464 -0.0464 z m -4.75813,-1.87466 0.11024,-0.10204 3.04271,-1.49537 3.04271,-1.49537 -0.52917,0.42544 -0.52916,0.42543 -2.38125,1.17106 -2.38125,1.17105 -0.24254,9.2e-4 -0.24253,9.2e-4 z m 2.8917,-0.43479 0.39354,-0.24882 0.19844,-0.004 0.19844,-0.004 v 0.20828 0.20827 l -0.59198,0.0446 -0.59198,0.0446 z m 4.75917,-3.18295 v -0.24897 h 1.19062 1.19063 v 0.24861 0.24861 l -0.99219,0.086 -0.99219,0.086 -0.19844,-0.0856 -0.19843,-0.0857 z"
           id="path142" /><path
           style="fill:#9e9e9e;fill-opacity:1"
           d="m 297.35225,316.43913 0.0775,-13.4276 -0.0774,-7.87136 -0.0774,-7.87135 h -2.65344 -2.65345 l -0.37797,0.37797 -0.37798,0.37798 v 6.99574 6.99574 l -0.99219,0.164 -0.99218,0.16399 -0.72761,0.003 -0.7276,0.003 v -7.14375 -7.14375 h -0.52917 -0.52917 v 7.14375 7.14375 h -0.66145 -0.66146 v -2.60891 -2.6089 l -0.16742,-1.22146 -0.16742,-1.22146 -0.22946,0.14181 -0.22945,0.14181 v 3.68856 3.68855 h -0.66146 -0.66146 v -6.3694 -6.3694 l -0.46302,0.089 -0.46302,0.089 -0.0709,6.28037 -0.0709,6.28037 h -0.65667 -0.65667 v -5.81253 -5.81253 l -0.39169,0.1503 -0.39169,0.15031 -0.0713,5.59608 -0.0713,5.59608 h -0.66146 -0.66146 l -0.0719,-5.11335 -0.0719,-5.11335 -0.32494,0.10809 -0.32495,0.1081 -0.072,4.93911 -0.072,4.9391 h -0.65562 -0.65562 v -4.63951 -4.63952 l -0.51177,0.27389 -0.51177,0.27389 h -0.69595 -0.69595 l -1.30582,0.56175 -1.30582,0.56175 v 0.34868 0.34868 l 0.26507,0.16382 0.26506,0.16382 1.52609,-0.94196 1.52609,-0.94195 h 0.33207 0.33206 l -0.0727,4.29948 -0.0727,4.29948 h -1.98437 -1.98438 l -0.0685,13.82447 -0.0685,13.82448 h 0.9284 0.9284 v -9.86476 -9.86477 l 1.38907,-1.35832 1.38906,-1.35831 2.21252,2.49183 2.21252,2.49183 h 4.16654 4.16654 l 2.19268,-2.3991 2.19269,-2.3991 1.28398,1.26468 1.28399,1.26467 v 9.86568 9.86567 h 0.78239 0.78238 z m -2.34399,-10.91448 0.70171,-0.83393 v 1.53564 1.53564 l -0.70171,-0.70171 -0.70171,-0.70171 z m -21.78076,0.46344 0.007,-1.65365 0.77003,0.92604 0.77003,0.92605 -0.69436,0.7276 -0.69436,0.7276 h -0.0828 -0.0828 z m 19.04288,-10.77289 v -7.15263 h 1.05834 1.05833 v 5.12369 5.12369 l 0.49725,0.63216 0.49725,0.63215 0.13352,0.52801 0.13351,0.52801 0.0307,-6.13595 0.0307,-6.13595 0.26458,-0.16352 0.26458,-0.16352 0.005,1.53697 0.005,1.53697 0.16564,5.20033 0.16565,5.20033 -0.13932,0.35592 -0.13932,0.35592 -2.01533,0.075 -2.01532,0.075 z"
           id="path141" /><path
           style="fill:#8c8c8c;fill-opacity:1"
           d="m 297.35235,316.30684 0.0774,-13.5599 -0.074,-7.73906 -0.074,-7.73906 h -1.46944 -1.46945 l 0.10888,0.33073 0.10888,0.33073 1.03765,0.13229 1.03765,0.13229 v 7.01146 7.01146 h -2.24896 -2.24896 l -0.0705,-7.07761 -0.0705,-7.0776 h -0.39256 -0.39255 v 7.15584 7.15583 l -1.78594,-0.0782 -1.78593,-0.0782 -0.0705,-7.07761 -0.0705,-7.0776 h -0.39255 -0.39256 v 7.1204 7.12041 h -1.85208 -1.85208 v -6.35906 -6.35905 l -0.39688,0.32938 -0.39687,0.32938 v 6.05302 6.05302 h -0.66146 -0.66146 v -4.86172 -4.86172 l -0.16451,-0.82253 -0.1645,-0.82253 -0.23237,0.14361 -0.23237,0.14362 v 5.54063 5.54064 h -0.79375 -0.79375 v -4.89479 -4.8948 h -0.26458 -0.26459 v 4.8948 4.89479 h -0.79375 -0.79375 v -4.65226 -4.65226 l -0.33073,0.10999 -0.33072,0.10999 -0.0724,4.54227 -0.0724,4.54227 h -2.14504 -2.14504 l 0.164,0.99218 0.164,0.99219 0.003,12.78372 0.003,12.78372 0.72761,-0.0837 0.7276,-0.0837 0.0694,-9.85063 0.0694,-9.85064 1.34406,-1.38716 1.34405,-1.38715 1.10013,1.19092 1.10013,1.19092 1.26737,1.38177 1.26737,1.38176 4.0243,-0.0114 4.02429,-0.0114 2.22532,-2.51647 2.22532,-2.51647 1.28041,1.26116 1.28041,1.26115 v 9.99797 9.99796 h 0.78248 0.78249 z m -2.52001,-10.83231 0.71205,-0.74321 h 0.0828 0.0828 v 1.50471 1.50471 l -0.79484,-0.7615 -0.79483,-0.7615 z m -21.61196,0.43821 v -1.729 l 0.83173,0.94728 0.83172,0.94728 -0.74893,0.78172 -0.74894,0.78171 h -0.0828 -0.0828 z"
           id="path140" /><path
           style="fill:#7a7a7a;fill-opacity:1"
           d="m 297.30038,317.11816 0.003,-12.78372 0.164,-0.99219 0.164,-0.99218 h -2.81275 -2.81274 v -7.14375 -7.14375 h -0.39687 -0.39688 v 7.14375 7.14375 h -1.85208 -1.85209 v -7.1658 -7.1658 l -0.33073,0.11012 -0.33072,0.11013 -0.0705,7.05567 -0.0705,7.05568 H 284.85776 283.01 v -6.21771 -6.21771 h -0.26459 -0.26458 v 6.23447 6.23447 l -0.8599,-0.0829 -0.85989,-0.0829 -0.13229,-3.43959 -0.13229,-3.43958 -0.19686,2.24896 -0.19685,2.24896 -0.002,1.25677 -0.002,1.25677 h -1.85208 -1.85209 v -4.62191 -4.6219 l -0.39687,0.15229 -0.39688,0.1523 v 4.46961 4.46961 h -2.15128 -2.15129 l 0.164,0.99218 0.164,0.99219 0.003,12.76615 0.003,12.76614 h 0.66146 0.66146 v -9.80542 -9.80542 l 1.3613,-1.43937 1.36129,-1.43937 h 0.33619 0.33618 l 2.05801,2.38125 2.05802,2.38125 h 4.12314 4.12315 l 1.431,-1.6257 1.431,-1.62569 0.62718,-0.74536 0.62717,-0.74536 -0.96954,0.12413 -0.96954,0.12413 -0.30217,0.19236 -0.30217,0.19235 -0.66146,0.029 -0.66146,0.029 -0.79375,0.1649 -0.79375,0.16489 -0.79375,0.0163 -0.79375,0.0163 -1.5875,-0.13485 -1.5875,-0.13484 -0.98603,-0.11503 -0.98602,-0.11503 -0.80437,-0.40127 -0.80436,-0.40127 0.18753,0.31267 0.18754,0.31268 -0.41982,-0.34002 -0.41981,-0.34001 -0.22629,0.0655 -0.22628,0.0655 -0.56053,-0.31149 -0.56052,-0.31148 -0.23323,0.183 -0.23322,0.18299 1.44617,-1.51522 1.44617,-1.51522 h 4.99307 4.99308 l 3.14876,2.95093 3.14875,2.95093 0.0693,9.94751 0.0693,9.9475 0.7276,0.0837 0.72761,0.0837 z m -24.23421,-12.822 0.13761,-0.35859 h 1.91991 1.91991 l -1.97775,1.99299 -1.97776,1.99299 -0.0798,-1.63439 -0.0798,-1.6344 z m 20.65942,1.49349 -1.83789,-1.85208 h 1.91113 1.91114 v 1.85208 1.85208 h -0.0732 -0.0732 z"
           id="path139" /><path
           style="fill:#686868;fill-opacity:1"
           d="m 297.29747,316.1084 v -13.75833 h -2.64584 -2.64583 v -7.14375 -7.14375 h -0.26458 -0.26459 l -0.0122,0.33073 -0.0122,0.33073 0.0239,6.81302 0.0239,6.81302 h -1.99607 -1.99607 v -7.14375 -7.14375 h -0.26458 -0.26458 v 7.14375 7.14375 h -1.98438 -1.98437 v -6.23333 -6.23332 l -0.26459,0.16352 -0.26458,0.16352 v 6.06981 6.0698 h -3.04271 -3.04271 v -3.6711 -3.67109 l -0.16536,-0.82682 -0.16537,-0.82683 h -0.23151 -0.23151 v 4.48679 4.48679 l -2.05052,0.0773 -2.05052,0.0773 0.0221,0.46302 0.022,0.46302 0.0441,13.22917 0.0441,13.22916 h 0.66146 0.66146 l 3.4e-4,-9.85572 3.4e-4,-9.85573 3.11834,-3.10886 3.11834,-3.10885 h 5.28598 5.28597 l 3.10472,3.11283 3.10472,3.11282 v 9.85176 9.85175 h 0.66146 0.66146 z m -3.53786,-12.11774 1.7707,-0.0792 0.21807,0.34379 0.21807,0.34379 0.004,1.71317 0.004,1.71317 -1.99282,-1.97776 -1.99283,-1.97775 z m -20.80381,1.93128 v -1.98437 h 2.00302 2.00301 l -1.78305,1.98437 -1.78306,1.98438 h -0.21996 -0.21996 z"
           id="path138" /><path
           style="fill:#575757;fill-opacity:1"
           d="m 297.12108,329.69035 0.17639,-0.17639 v -13.58195 -13.58194 h -2.64584 -2.64583 v -7.14375 -7.14375 h -0.26458 -0.26459 v 7.14375 7.14375 h -1.98437 -1.98438 v -7.01146 -7.01146 h -0.26458 -0.26458 v 7.01146 7.01146 h -5.42396 -5.42396 l -0.0564,-4.56407 -0.0564,-4.56406 -0.14202,4.49792 -0.14202,4.49792 -2.0529,0.0773 -2.0529,0.0773 0.0685,13.68102 0.0685,13.68101 0.59531,0.0845 0.59531,0.0846 v -9.8781 -9.8781 l 3.24497,-3.23718 3.24496,-3.23718 h 5.02724 5.02723 l 3.23717,3.24497 3.23718,3.24497 v 9.85191 9.8519 h 0.48507 0.48507 z m -3.50579,-23.91234 -1.93111,-2.12831 2.07904,0.0778 2.07904,0.0778 0.0773,2.05052 0.0773,2.05052 h -0.2252 -0.2252 z m -20.60447,0.0778 0.0773,-2.05052 2.08255,-0.0779 2.08255,-0.0779 -1.92181,2.12837 -1.92181,2.12838 h -0.23801 -0.23802 z"
           id="path137" /><path
           style="fill:#454545;fill-opacity:1"
           d="m 297.29747,315.97611 v -13.62604 h -12.83229 -12.8323 v 13.62604 13.62604 h 0.66146 0.66146 v -9.72741 -9.7274 l 3.24497,-3.23718 3.24496,-3.23718 h 5.02724 5.02723 l 3.23717,3.24497 3.23718,3.24497 v 9.71961 9.71962 h 0.66146 0.66146 z M 272.9558,305.92194 v -2.24896 h 2.11667 2.11666 v 0.19259 0.19258 l -2.04431,2.05638 -2.04431,2.05637 h -0.0724 -0.0723 z m 20.69702,0.0599 -1.9116,-1.92445 v -0.19222 -0.19222 h 2.11666 2.11667 v 2.11667 2.11667 h -0.20506 -0.20506 z m -1.82341,-10.95194 0.17639,-0.17639 v -3.2632 -3.26319 h -0.27316 -0.27317 l 0.0337,3.43958 0.0337,3.43959 h 0.0631 0.0631 z"
           id="path136" /><path
           style="fill:#333333;fill-opacity:1"
           d="m 297.03288,319.98693 v -9.61523 l 0.17361,-4.01082 0.1736,-4.01081 h -12.8736 -12.87361 v 13.62604 13.62604 h 0.66146 0.66146 v -9.88266 -9.88266 l 3.28225,-3.08192 3.28225,-3.08193 h 5.06252 5.06252 l 3.1646,3.12091 3.16461,3.1209 v 9.84368 9.84368 h 0.52917 0.52916 z m -3.43958,-14.06499 -2.23728,-2.24896 h 2.30927 2.30926 v 2.24896 2.24896 h -0.072 -0.072 z m -20.6375,0 v -2.24896 h 2.30926 2.30927 l -2.23728,2.24896 -2.23727,2.24896 h -0.072 -0.072 z"
           id="path135" /></g><g
         id="g181"
         transform="translate(68.551559,-1.2661238)"><path
           id="shape"
           style="opacity:0.608955;fill:none;fill-opacity:1;stroke:#000000;stroke-linejoin:bevel"
           d="m 286.18746,287.00412 -7.54527,3.7698 -7.54476,3.76979 0.18758,0.39739 0.0837,0.17674 v 0.0574 l 0.0382,0.0238 0.0661,0.13952 -0.0346,7.01146 h -0.14004 l 0.13591,0.82114 v 0.001 l -0.047,9.43043 -0.0858,17.26406 h 0.062 0.26924 v 0.0351 l 0.3054,-0.0351 h 0.32247 0.0315 0.40411 l 0.25941,0.0367 v -0.0367 h 0.26459 5.1e-4 v -9.86451 -9.09351 l 0.006,-0.77669 1.38338,-1.35289 1.29139,-1.26349 1.08314,1.18442 1.08882,1.19063 1.29915,1.38906 1.29863,1.38906 4.0137,-0.003 4.01371,-0.003 2.22777,-2.52233 2.22777,-2.52181 1.27796,1.25884 1.27331,1.25367 0.005,0.65267 v 9.08472 9.99784 10e-4 h 0.92604 0.36432 l 0.29662,0.0341 v -0.0341 h 0.2651 v -9.8795 -9.87846 l -0.1018,-6.72259 0.007,-0.045 0.16381,-0.99219 h -0.18707 l -0.0491,-3.26233 -0.0393,-4.07985 -0.0739,-7.73907 h -0.007 -0.06 l -0.004,-0.26458 h -5.51181 z m -12.95424,17.64078 0.78186,0.7488 0.49506,0.47438 5.2e-4,5.2e-4 0.26406,0.31781 -0.69453,0.72761 -0.25011,0.262 -0.46199,0.4656 h -0.0651 -0.0827 l 0.007,-1.65365 z m 22.47666,0.231 v 0.91364 0.43666 0.01 0.0827 1.32292 h -0.0729 -0.0305 l -0.39998,-0.38292 -0.19844,-0.19844 -0.0196,-0.0196 -0.68213,-0.68213 0.42064,-0.49971 0.26149,-0.26148 z" /></g></g></g>


<script type="text/javascript">
  <![CDATA[
    // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
    let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#ffffff';
    let _pc_state1Colour     = '#00ff00';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    let _pn_strokeWidth      = 1;     
    let _pn_opacity          = 0.60;  
    let _pn_indicationMode   = 0;     
    //!export-end
    
    // Internal state variables
    let stateNumber = 0;
    let isBlinking = false;
    let myCheckInterval;
    
    // Force global timing mechanism by using epoch time
    function getGlobalBlinkState(interval) {
      // Use the current time divided by interval, which will give
      // the same result for all SVGs at the same moment
      return Math.floor(Date.now() / interval) % 2 === 0;
    }
    
    // Function to update the color based on the set state
    function logic() {
      switch (stateNumber) {
        case 0: // off
          setColors(_pc_state0Colour);
          stopBlinking();
          break; 
        case 1: // run
          setColors(_pc_state1Colour);
          stopBlinking();
          break;
        case 2: // warning
          setColors(_pc_state2Colour);
          stopBlinking();
          break;
        case 3: // fault
          startForceSync();
          break;
        case 4: // invalid 
          setColors(_pc_state4Colour);
          stopBlinking();
          break;
        case 5: // spare
          setColors(_pc_state5Colour);
          stopBlinking();
          break;
        default:
          console.log('Undefined State');
          stopBlinking();
      }
    }

    // Initial setup
    function init() {
      // Set up visibility change listener
      document.addEventListener('visibilitychange', handleVisibilityChange);
      
      // Initial state rendering
      logic(); 
    }
    
    // Handler for tab visibility changes
    function handleVisibilityChange() {
      if (document.visibilityState === 'visible' && isBlinking) {
        // Resume checking when tab becomes visible again
        startForceSync();
      } else if (document.visibilityState === 'hidden' && isBlinking) {
        // Pause checking when tab is hidden
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
    }
    
    // Update the blinking display based on global time
    function updateBlinkDisplay() {
      if (!isBlinking) return;
      
      // Get the global blink state
      const showFaultColor = getGlobalBlinkState(_pn_setInterval);
      
      // Set the appropriate color
      if (showFaultColor) {
        setColors(_pc_state3Colour);
      } else {
        setColors(_pc_state0Colour);
      }
    }
    
    // Start forced synchronization
    function startForceSync() {
      // Clear any existing interval
      stopBlinking();
      
      // Set blinking state
      isBlinking = true;
      
      // Update display immediately
      updateBlinkDisplay();
      
      // Check very frequently to ensure tight synchronization (every 16ms = ~60fps)
      myCheckInterval = setInterval(updateBlinkDisplay, 16);
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
      if (id === '_pn_setInterval')    _pn_setInterval    = value;
      if (id === '_pc_state0Colour')   _pc_state0Colour   = value;
      if (id === '_pc_state1Colour')   _pc_state1Colour   = value;
      if (id === '_pc_state2Colour')   _pc_state2Colour   = value;
      if (id === '_pc_state3Colour')   _pc_state3Colour   = value;
      if (id === '_pc_state4Colour')   _pc_state4Colour   = value;
      if (id === '_pc_state5Colour')   _pc_state5Colour   = value;
      if (id === '_pn_lightShade')     _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade')      _pn_darkShade      = value;
      if (id === '_pn_shadowShade')    _pn_shadowShade    = value;
      if (id === '_pn_strokeWidth')    _pn_strokeWidth    = value;
      if (id === '_pn_opacity')        _pn_opacity        = value;
      if (id === '_pn_indicationMode') _pn_indicationMode = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Function to update the fill and/or stroke color based on indication mode
    function setColors(color) {
      // Get the single element with ID "shape"
      const shapeElement = document.getElementById('shape');
      if (!shapeElement) return; // Safety check
      
      // Set opacity
      shapeElement.style.opacity = _pn_opacity;
      
      // Set stroke width
      shapeElement.style.strokeWidth = _pn_strokeWidth;
      
      // Apply colors based on indication mode
      switch(_pn_indicationMode) {
        case 0: // Fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
          break;
        case 1: // Stroke only
          shapeElement.style.fill = "none";
          shapeElement.style.stroke = color;
          break;
        case 2: // Both fill and stroke
          shapeElement.style.fill = color;
          shapeElement.style.stroke = color;
          break;
        default:
          // Default to fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
      }
    }

    // Function to stop blinking
    function stopBlinking() {
      if (myCheckInterval) {
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
      isBlinking = false;
    }

    // Clean up event listeners when widget is destroyed
    function cleanup() {
      stopBlinking();
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    }

    // Initialize the SVG
    init();

    // Ensure cleanup when SVG is removed
    const cleanupObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.removedNodes.forEach((node) => {
          if (node.id === 'Layer_1') {
            cleanup();
            cleanupObserver.disconnect();
          }
        });
      });
    });
    cleanupObserver.observe(document.body, { childList: true, subtree: true });
  ]]>
  </script>
</svg>
