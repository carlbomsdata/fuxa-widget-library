<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="16.868996mm"
   height="8.3837175mm"
   viewBox="0 0 16.868996 8.3837175"
   version="1.1"
   id="Layer_1"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs1" /><g
     id="layer10"
     transform="translate(-314.89338,-122.64366)"><g
       id="g260"><g
         id="g240"
         transform="translate(46.654825,1.3789604)"><path
           style="fill:#d4d4d4;fill-opacity:1"
           d="m 268.92382,128.83769 -0.42847,-0.61172 v -0.88456 -0.88457 l 0.2739,-0.51177 0.27389,-0.51177 h 0.35517 0.35517 l 0.26237,-0.33073 0.26238,-0.33073 0.13357,-1.24951 0.13358,-1.24952 -0.49585,-0.15738 -0.49584,-0.15737 v -0.24676 -0.24675 h 0.71564 0.71565 l 6.96223,1.35417 6.96224,1.35418 -0.15325,1.3578 -0.15324,1.35781 -0.1153,0.57124 -0.1153,0.57123 -1.78694,0.28145 -1.78694,0.28144 -3.96875,0.27065 -3.96875,0.27064 -1.75435,0.15713 -1.75435,0.15712 z"
           id="path249" /><path
           style="fill:#c2c2c2;fill-opacity:1"
           d="m 268.92382,128.83769 -0.42847,-0.61172 v -0.88456 -0.88457 l 0.2739,-0.51177 0.27389,-0.51177 h 0.35517 0.35517 l 0.26237,-0.33073 0.26238,-0.33073 0.13357,-1.24951 0.13358,-1.24952 -0.49585,-0.15738 -0.49584,-0.15737 v -0.24676 -0.24675 h 0.71564 0.71565 l 6.96223,1.35417 6.96224,1.35418 -0.15325,1.3578 -0.15324,1.35781 -0.1153,0.57124 -0.1153,0.57123 -1.78694,0.28145 -1.78694,0.28144 -3.96875,0.27065 -3.96875,0.27064 -1.75435,0.15713 -1.75435,0.15712 z m 1.41865,-3.0135 -0.31958,-0.38506 -0.25183,0.15564 -0.25184,0.15565 0.47348,0.5232 0.47349,0.5232 0.0979,-0.29378 0.0979,-0.29378 z m 6.54915,-2.40156 -0.0818,-0.0818 -1.13787,-0.18195 -1.13786,-0.18195 0.0895,0.63286 0.0895,0.63285 0.92604,0.13411 0.92604,0.1341 0.20413,-0.50325 0.20412,-0.50324 z m 2.38233,0.58069 0.12339,-0.1234 -0.96541,-0.18111 -0.96542,-0.18111 -0.15264,0.15264 -0.15264,0.15264 0.15111,0.39379 0.15112,0.39379 0.84354,-0.24192 0.84355,-0.24193 z m -5.11213,-0.59226 0.16682,-0.43475 -0.0724,-0.0593 -0.0724,-0.0593 -0.97155,-0.17551 -0.97156,-0.17551 -0.16077,0.26013 -0.16077,0.26014 0.73545,0.39885 0.73545,0.39884 0.30243,0.0106 0.30242,0.0106 z"
           id="path248" /><path
           style="fill:#b0b0b0;fill-opacity:1"
           d="m 268.92382,128.83769 -0.42847,-0.61172 v -0.88456 -0.88457 l 0.2739,-0.51177 0.27389,-0.51177 h 0.2496 0.2496 l -0.3072,0.67423 -0.3072,0.67423 0.8076,0.80759 0.8076,0.8076 0.1844,-0.98294 0.1844,-0.98294 -0.54498,-0.58011 -0.54499,-0.58011 0.2305,-0.24951 0.23049,-0.2495 0.13121,-1.24951 0.13121,-1.24952 -0.49585,-0.15738 -0.49584,-0.15737 v -0.24676 -0.24675 h 0.71564 0.71565 l 6.96223,1.35417 6.96224,1.35418 -0.15325,1.3578 -0.15324,1.35781 -0.1153,0.57124 -0.1153,0.57123 -1.78694,0.28145 -1.78694,0.28144 -3.96875,0.27065 -3.96875,0.27064 -1.75435,0.15713 -1.75435,0.15712 z m 6.97987,-2.08147 -0.66146,-0.21184 -0.33073,-0.0264 -0.33073,-0.0264 v 0.26459 0.26458 l 0.99219,-0.0264 0.99218,-0.0264 z m -2.13872,-0.35966 -0.11024,-0.0951 -0.79375,-0.15864 -0.79375,-0.15864 0.79375,0.36155 0.79375,0.36154 0.11024,-0.10783 0.11024,-0.10784 z m 10.51758,-1.6042 -0.16017,-0.41739 h -0.27289 -0.27289 v 0.85044 0.85045 l 0.43306,-0.43306 0.43305,-0.43305 z m -7.44072,-0.4725 0.18644,-0.84885 -0.29936,-0.0998 -0.29935,-0.0998 0.11996,-0.19411 0.11997,-0.19411 -0.77978,0.11444 -0.77977,0.11445 -0.004,-0.36076 -0.004,-0.36076 -0.25648,0.39688 -0.25648,0.39687 -0.004,0.8158 -0.004,0.8158 0.17639,0.17639 0.17639,0.17639 h 0.86092 0.86092 z m 2.44852,0.53136 0.3175,-0.3175 v -0.31178 -0.31177 l -1.0456,-0.26541 -1.0456,-0.2654 -0.14502,0.14503 -0.14503,0.14502 v 0.74965 0.74966 h 0.87313 0.87312 z m -5.13476,-0.63018 0.1606,-0.41852 v -0.50753 -0.50752 h -0.41249 -0.41249 l 0.12934,-0.20929 0.12935,-0.20929 -0.90748,0.10594 -0.90748,0.10595 v 0.62406 0.62406 l 0.7276,0.39473 0.7276,0.39473 0.30243,0.0106 0.30242,0.0106 z m 6.3783,0.15393 0.16353,-0.26459 h -0.41249 -0.41249 v 0.26459 0.26458 h 0.24896 0.24897 z m -9.02414,-1.47685 0.1606,-0.41852 v -0.11065 -0.11065 h -0.39687 -0.39688 v 0.52917 0.52916 h 0.23628 0.23627 z"
           id="path247" /><path
           style="fill:#9e9e9e;fill-opacity:1"
           d="m 268.92382,128.83769 -0.42847,-0.61172 v -0.94889 -0.94889 l 0.36271,-0.49603 0.3627,-0.49603 -0.13165,1.37014 -0.13165,1.37013 0.33051,0.39824 0.33051,0.39824 h 0.35517 0.35517 l 0.23906,-0.46302 0.23907,-0.46302 0.17039,-0.94573 0.17039,-0.94572 -0.66147,-0.35401 -0.66147,-0.35401 0.22672,-0.28776 0.22672,-0.28777 0.13357,-1.24951 0.13358,-1.24952 -0.49585,-0.15738 -0.49584,-0.15737 v -0.24676 -0.24675 l 0.85989,0.0157 0.8599,0.0157 3.04271,0.60274 3.0427,0.60275 -0.0905,1.63052 -0.0905,1.63053 h 1.05943 1.05942 l 0.18035,-1.06749 0.18035,-1.06748 -0.35553,-0.43161 -0.35554,-0.43162 0.66146,0.15697 0.66146,0.15697 2.3193,0.45313 2.31931,0.45313 -0.15248,1.35202 -0.15248,1.35202 -0.1153,0.57124 -0.1153,0.57123 -1.78694,0.28145 -1.78694,0.28144 -3.96875,0.27065 -3.96875,0.27064 -1.75435,0.15713 -1.75435,0.15712 z m 8.36893,-1.19296 0.99219,-0.164 v -0.26304 -0.26304 l -0.81501,0.16301 -0.81502,0.163 -0.42299,-0.423 -0.423,-0.42299 -1.01095,0.1356 -1.01095,0.13559 v -0.23436 -0.23437 l -0.64236,-0.16122 -0.64237,-0.16122 -0.54826,0.17401 -0.54826,0.17401 v 0.3367 0.33669 l 1.12448,0.33905 1.12448,0.33906 0.26458,0.0793 0.26458,0.0793 1.05834,0.018 1.05833,0.018 z m 6.91224,-1.45075 0.16536,-0.82683 v -0.49609 -0.49609 h -0.36225 -0.36226 l -0.164,0.99218 -0.164,0.99219 -0.003,0.33073 -0.003,0.33073 h 0.3638 0.3638 z m -7.81824,-0.462 0.35076,-0.22239 0.0461,-1.29492 0.0461,-1.29491 h -0.57141 -0.5714 l -0.2003,-0.19844 -0.20029,-0.19844 h -0.35278 -0.35278 v 1.54341 1.5434 l 0.17639,0.17639 0.17639,0.17639 0.55121,-0.004 0.55122,-0.004 z m 4.89204,-0.67112 1.00948,-0.62051 -0.95069,-0.17835 -0.95068,-0.17835 0.17647,-0.28554 0.17647,-0.28554 -0.36755,0.12092 -0.36756,0.12092 -0.0821,0.97174 -0.0821,0.97173 0.21441,-0.008 0.21441,-0.008 z m -7.08155,-0.81494 0.17806,-1.18737 -0.16507,-0.43014 -0.16506,-0.43015 -0.52569,0.13747 -0.52568,0.13747 -0.14103,-0.22818 -0.14103,-0.22819 -0.3884,0.14904 -0.3884,0.14904 v 1.25418 1.25418 l 0.59531,0.28711 0.59531,0.28711 0.44681,0.0179 0.44681,0.0179 z m -2.54548,-1.364 0.0186,-0.56701 -0.39687,-0.15229 -0.39688,-0.1523 v 1.00594 1.00593 l 0.19015,0.19015 0.19015,0.19015 0.18813,-0.47678 0.18813,-0.47679 z m 6.34327,0.2719 -0.35471,-0.42739 0.49882,0.0967 0.49882,0.0967 0.11012,0.33073 0.11012,0.33073 h -0.25424 -0.25423 z"
           id="path246" /><path
           style="fill:#8c8c8c;fill-opacity:1"
           d="m 269.04411,129.02878 -0.30978,-0.37326 -0.14928,-0.91991 -0.14928,-0.91991 0.31107,-0.49276 0.31108,-0.49277 -0.16424,0.76829 -0.16424,0.76828 0.31193,0.75307 0.31193,0.75307 0.43092,-0.008 0.43092,-0.008 0.43216,-0.32891 0.43215,-0.32891 0.13247,-0.52257 0.13247,-0.52257 0.0307,0.4425 0.0307,0.4425 0.94281,0.31116 0.94281,0.31116 2.16605,-0.16924 2.16604,-0.16923 1.00363,-0.14659 1.00362,-0.1466 -0.6057,-0.52532 -0.60571,-0.52533 -0.86094,0.10052 -0.86094,0.10051 v -0.20389 -0.20389 l -0.8599,-0.27126 -0.8599,-0.27125 0.83825,0.12045 0.83825,0.12046 0.27318,-1.64271 0.27318,-1.6427 -0.12876,1.62169 -0.12876,1.62168 0.42803,0.16425 0.42804,0.16426 h 0.74901 0.74901 l 0.27228,-1.65365 0.27229,-1.65365 -0.0656,1.62567 -0.0656,1.62566 0.41173,-0.12911 0.41173,-0.12911 0.73097,-0.27327 0.73097,-0.27328 0.16474,-0.65636 0.16474,-0.65637 -0.36654,-0.23213 -0.36654,-0.23213 0.39687,-0.0354 0.39688,-0.0354 0.26458,0.065 0.26458,0.065 0.32786,0.0104 0.32786,0.0105 -0.16585,1.41111 -0.16585,1.41111 h 0.40245 0.40244 l 0.15954,-0.59531 0.15954,-0.59532 0.004,-0.70555 0.004,-0.70556 -0.33073,-0.13345 -0.33073,-0.13345 0.5887,-0.0209 0.5887,-0.0209 -0.11536,0.72761 -0.11537,0.7276 -0.15474,1.2296 -0.15474,1.22961 -0.84776,0.15872 -0.84776,0.15873 -6.48229,0.52773 -6.48229,0.52772 -0.16604,0.002 -0.16604,0.002 z m 14.00333,-4.14026 v -0.24897 h -0.26459 -0.26458 v 0.41249 0.41249 l 0.26458,-0.16352 0.26459,-0.16352 z m -9.04781,1.54372 -0.11377,-0.33748 0.18386,-0.79375 0.18386,-0.79375 0.0313,0.70555 0.0313,0.70556 0.29359,0.0979 0.2936,0.0979 -0.39499,0.32781 -0.39499,0.32781 z m -2.74461,-0.4399 0.14505,-0.23471 -0.46017,0.0363 -0.46017,0.0363 -0.0409,-0.92604 -0.0409,-0.92604 0.12547,0.59531 0.12547,0.59532 h 0.25471 0.25471 l 0.23928,-0.59532 0.23929,-0.59531 0.0168,0.72256 0.0168,0.72257 0.72761,0.16047 0.7276,0.16048 0.26458,0.10873 0.26459,0.10873 -0.87155,-0.0878 -0.87154,-0.0878 -0.13626,0.22047 -0.13626,0.22047 h -0.26458 -0.26458 z m 3.10294,-2.67571 v -0.66146 l 0.13345,0.33073 0.13346,0.33073 -0.13346,0.33073 -0.13345,0.33073 z m -2.68761,-1.04256 v -0.31362 l -0.46302,0.0471 -0.46302,0.0471 -0.52917,-0.0472 -0.52916,-0.0472 0.62089,-0.24874 0.62089,-0.24875 0.79946,0.20716 0.79945,0.20716 -0.42816,0.35534 -0.42816,0.35534 z"
           id="path245" /><path
           style="fill:#7a7a7a;fill-opacity:1"
           d="m 269.19937,129.00994 -0.43943,-0.43944 v -0.24568 -0.24569 l 0.52316,0.52317 0.52317,0.52316 0.40287,-0.15459 0.40288,-0.1546 v -0.23628 -0.23627 h 0.37483 0.37482 l 0.0882,0.24666 0.0882,0.24667 4.49792,-0.37106 4.49791,-0.37105 0.66146,-0.0247 0.66146,-0.0247 -0.66146,-0.26493 -0.66146,-0.26494 -0.58205,0.11019 -0.58206,0.11019 -0.0961,-0.2915 -0.0961,-0.29151 0.18386,-0.79375 0.18385,-0.79375 0.0313,0.72256 0.0313,0.72257 0.72761,0.15327 0.7276,0.15326 0.43562,0.0844 0.43562,0.0844 0.18075,-1.68785 0.18075,-1.68786 0.17738,-1.6e-4 0.17738,-1.7e-4 -0.0905,1.38923 -0.0905,1.38923 0.26861,-0.26459 0.26862,-0.26458 0.11301,-0.79375 0.113,-0.79375 0.0396,1.15534 0.0396,1.15534 0.52917,-0.13838 0.52916,-0.13838 v 0.51094 0.51095 l -0.59531,0.2245 -0.59531,0.22451 -5.68854,0.43561 -5.68855,0.43561 -1.08192,0.15074 -1.08192,0.15075 z m -0.68313,-1.61431 0.0209,-0.50712 0.13896,0.34726 0.13897,0.34727 -0.15985,0.15985 -0.15986,0.15985 z m 8.1812,-1.02067 v -0.94166 h 0.10226 0.10226 l 0.11821,0.8054 0.1182,0.8054 -0.22046,0.13626 -0.22047,0.13625 z m -2.57911,-0.54479 0.005,-1.05833 0.11506,0.5984 0.11507,0.5984 -0.12041,0.45993 -0.1204,0.45994 z m 10.3036,0 0.01,-0.79375 0.12197,0.46806 0.12197,0.46806 -0.13178,0.32569 -0.13177,0.32569 z m -13.01616,0.14791 v -0.2802 h -0.52917 -0.52916 v -0.23981 -0.23981 l 0.50504,0.13207 0.50503,0.13207 0.10342,-0.48757 0.10342,-0.48757 0.14981,0.73392 0.14981,0.73392 -0.2291,0.14159 -0.2291,0.14159 z m 8.25366,-1.20624 0.01,-0.79375 0.12197,0.46806 0.12197,0.46805 -0.13178,0.3257 -0.13177,0.32569 z m -8.25366,-2.77812 -0.39688,-0.25648 0.59532,-0.004 0.59531,-0.004 v 0.26459 0.26458 l -0.19844,-0.004 -0.19844,-0.004 z"
           id="path244" /><path
           style="fill:#686868;fill-opacity:1"
           d="m 270.194,129.02823 0.50803,-0.41179 1.07947,0.16504 1.07948,0.16504 0.11024,0.0955 0.11024,0.0955 h -0.80477 -0.80477 l -0.89297,0.15127 -0.89297,0.15128 z m 3.79146,-0.34675 0.85989,-0.10671 0.8599,0.10671 0.85989,0.10672 h -1.71979 -1.71979 z m 2.97656,-0.20395 0.39687,-0.10303 2.31511,-0.17144 2.3151,-0.17143 0.0396,-0.96844 0.0396,-0.96843 0.11174,0.74329 0.11173,0.74329 0.31164,-0.10252 0.31164,-0.10251 0.1609,-1.03765 0.16089,-1.03765 0.0375,0.85989 0.0376,0.8599 h 0.54857 0.54856 l -0.0855,0.44421 -0.0855,0.4442 -0.15777,-0.11348 -0.15777,-0.11347 -0.3714,0.30151 -0.37139,0.30151 -3.30729,0.14764 -3.3073,0.14764 z m 2.44263,-1.45673 v -0.92604 l 0.121,0.46302 0.121,0.46302 -0.121,0.46302 -0.121,0.46302 z m -2.68633,-0.15434 0.0209,-0.50712 0.13897,0.34727 0.13896,0.34726 -0.15985,0.15985 -0.15985,0.15986 z m -2.64583,-0.52917 0.0209,-0.50712 0.13896,0.34727 0.13897,0.34727 -0.15985,0.15985 -0.15986,0.15985 z m -2.64583,-0.52916 0.0209,-0.50712 0.13896,0.34726 0.13896,0.34727 -0.15985,0.15985 -0.15985,0.15985 z m 10.8688,-0.37483 v -0.66146 l 0.13345,0.33073 0.13346,0.33073 -0.13346,0.33073 -0.13345,0.33073 z m -10.62511,-3.43958 -0.39687,-0.25648 0.31511,-0.004 0.31512,-0.004 0.16352,0.26459 0.16352,0.26458 -0.0818,-0.004 -0.0818,-0.004 z"
           id="path243" /><path
           style="fill:#575757;fill-opacity:1"
           d="m 270.41673,128.95478 0.44727,-0.44727 0.19708,0.19707 0.19707,0.19708 -0.38921,0.24614 -0.38921,0.24615 -0.25514,0.004 -0.25513,0.004 z m 10.84477,-0.80057 0.7276,-0.11023 v -0.41169 -0.4117 l 0.37552,0.31165 0.37552,0.31165 0.24717,-0.44168 0.24718,-0.44168 0.56793,0.18026 0.56793,0.18025 v 0.24676 0.24675 h -0.51355 -0.51355 l -0.16352,0.26458 -0.16352,0.26459 -1.24116,-0.0396 -1.24116,-0.0396 z"
           id="path242" /><path
           style="fill:#454545;fill-opacity:1"
           d="m 270.47973,128.87288 0.16352,-0.26458 h 0.24897 0.24897 v 0.26458 0.26459 h -0.41249 -0.41249 z m 11.50937,-0.87296 v -0.40041 l 0.52917,0.13838 0.52917,0.13838 v -0.39105 -0.39104 l 0.66145,0.12645 0.66146,0.12644 v 0.20067 0.20066 l -0.7276,0.14684 -0.72761,0.14683 -0.46302,0.17913 -0.46302,0.17913 z"
           id="path241" /><path
           style="fill:#333333;fill-opacity:1"
           d="m 270.47973,128.87288 0.16352,-0.26458 h 0.24897 0.24897 v 0.26458 0.26459 h -0.41249 -0.41249 z m 12.10469,-0.97776 0.46302,-0.11737 v -0.24619 -0.24618 h 0.71437 0.71438 l -0.27419,0.27419 -0.27419,0.27419 -0.90321,0.0894 -0.90321,0.0894 z"
           id="path240" /></g><path
         id="shape"
         style="opacity:0.598187;fill:none;fill-opacity:1;stroke:#000000;stroke-width:0.4;stroke-linejoin:bevel;stroke-dasharray:none"
         d="m 270.92786,121.46264 -0.005,0.002 h -0.65319 -0.71572 v 0.2465 0.24701 l 0.49558,0.1571 0.49609,0.15761 -0.13384,1.24954 -0.13333,1.24954 -0.031,0.0393 -0.001,0.001 -0.19379,0.20929 -0.23048,0.24908 0.0331,0.0346 -0.1018,0.12815 h -0.21084 -0.14418 -0.18655 l 0.009,-0.0971 -0.0708,0.0971 h -0.10697 l -0.27389,0.5116 -0.0176,0.0326 -0.25631,0.35036 v 0.12868 0.26458 l -0.0594,0.0946 0.0594,0.36845 v 0.093 0.0641 0.8847 l 0.22014,0.31419 v 5.2e-4 l 0.0186,0.11472 0.31006,0.3731 0.0848,0.10232 0.22324,0.31833 0.26304,-0.0238 0.0238,0.0238 0.33796,-0.047 0.24753,-0.004 0.25528,-0.004 0.0842,-0.0532 0.5426,-0.0486 1.12138,-0.10025 0.66456,-0.0543 h 0.18861 l -0.016,-0.0139 0.1664,-0.0139 0.0134,-0.001 0.0103,-5.1e-4 3.57446,-0.2434 3.96875,-0.27079 1.31362,-0.20722 h 0.003 l 0.5364,-0.0439 0.0481,-0.009 0.31678,0.01 0.0326,-0.0527 0.13126,-0.006 0.0202,-0.0165 0.15141,-0.0568 0.14779,-0.0279 0.51935,-0.0971 h 5.2e-4 l 0.002,-5.2e-4 0.35191,-0.0553 0.11524,-0.57154 0.11524,-0.57103 0.15245,-1.35237 5.1e-4,-0.006 0.0486,-0.42995 0.10335,-0.91623 0.002,-0.0114 -0.031,-0.006 0.009,-0.0558 -0.24856,0.009 -3.47007,-0.6749 -0.65991,-0.12867 -0.42013,-0.0816 -0.48059,-0.11369 -0.66146,-0.1571 0.0475,0.0579 -0.34416,-0.0667 -0.0119,-0.0357 -0.49868,-0.0966 -0.49919,-0.0966 0.032,0.0382 -0.19741,-0.0382 -0.11575,-0.0222 v -0.003 l -3.04271,-0.60255 -3.04271,-0.60306 -0.14159,-0.003 -0.14676,-0.0284 h -0.0496 z"
         transform="translate(46.654826,1.3789604)" /></g></g>


<script type="text/javascript">
  <![CDATA[
    // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
    let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#ffffff';
    let _pc_state1Colour     = '#00ff00';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    let _pn_strokeWidth      = 1;     
    let _pn_opacity          = 0.60;  
    let _pn_indicationMode   = 0;     
    //!export-end
    
    // Internal state variables
    let stateNumber = 0;
    let isBlinking = false;
    let myCheckInterval;
    
    // Force global timing mechanism by using epoch time
    function getGlobalBlinkState(interval) {
      // Use the current time divided by interval, which will give
      // the same result for all SVGs at the same moment
      return Math.floor(Date.now() / interval) % 2 === 0;
    }
    
    // Function to update the color based on the set state
    function logic() {
      switch (stateNumber) {
        case 0: // off
          setColors(_pc_state0Colour);
          stopBlinking();
          break; 
        case 1: // run
          setColors(_pc_state1Colour);
          stopBlinking();
          break;
        case 2: // warning
          setColors(_pc_state2Colour);
          stopBlinking();
          break;
        case 3: // fault
          startForceSync();
          break;
        case 4: // invalid 
          setColors(_pc_state4Colour);
          stopBlinking();
          break;
        case 5: // spare
          setColors(_pc_state5Colour);
          stopBlinking();
          break;
        default:
          console.log('Undefined State');
          stopBlinking();
      }
    }

    // Initial setup
    function init() {
      // Set up visibility change listener
      document.addEventListener('visibilitychange', handleVisibilityChange);
      
      // Initial state rendering
      logic(); 
    }
    
    // Handler for tab visibility changes
    function handleVisibilityChange() {
      if (document.visibilityState === 'visible' && isBlinking) {
        // Resume checking when tab becomes visible again
        startForceSync();
      } else if (document.visibilityState === 'hidden' && isBlinking) {
        // Pause checking when tab is hidden
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
    }
    
    // Update the blinking display based on global time
    function updateBlinkDisplay() {
      if (!isBlinking) return;
      
      // Get the global blink state
      const showFaultColor = getGlobalBlinkState(_pn_setInterval);
      
      // Set the appropriate color
      if (showFaultColor) {
        setColors(_pc_state3Colour);
      } else {
        setColors(_pc_state0Colour);
      }
    }
    
    // Start forced synchronization
    function startForceSync() {
      // Clear any existing interval
      stopBlinking();
      
      // Set blinking state
      isBlinking = true;
      
      // Update display immediately
      updateBlinkDisplay();
      
      // Check very frequently to ensure tight synchronization (every 16ms = ~60fps)
      myCheckInterval = setInterval(updateBlinkDisplay, 16);
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
      if (id === '_pn_setInterval')    _pn_setInterval    = value;
      if (id === '_pc_state0Colour')   _pc_state0Colour   = value;
      if (id === '_pc_state1Colour')   _pc_state1Colour   = value;
      if (id === '_pc_state2Colour')   _pc_state2Colour   = value;
      if (id === '_pc_state3Colour')   _pc_state3Colour   = value;
      if (id === '_pc_state4Colour')   _pc_state4Colour   = value;
      if (id === '_pc_state5Colour')   _pc_state5Colour   = value;
      if (id === '_pn_lightShade')     _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade')      _pn_darkShade      = value;
      if (id === '_pn_shadowShade')    _pn_shadowShade    = value;
      if (id === '_pn_strokeWidth')    _pn_strokeWidth    = value;
      if (id === '_pn_opacity')        _pn_opacity        = value;
      if (id === '_pn_indicationMode') _pn_indicationMode = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Function to update the fill and/or stroke color based on indication mode
    function setColors(color) {
      // Get the single element with ID "shape"
      const shapeElement = document.getElementById('shape');
      if (!shapeElement) return; // Safety check
      
      // Set opacity
      shapeElement.style.opacity = _pn_opacity;
      
      // Set stroke width
      shapeElement.style.strokeWidth = _pn_strokeWidth;
      
      // Apply colors based on indication mode
      switch(_pn_indicationMode) {
        case 0: // Fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
          break;
        case 1: // Stroke only
          shapeElement.style.fill = "none";
          shapeElement.style.stroke = color;
          break;
        case 2: // Both fill and stroke
          shapeElement.style.fill = color;
          shapeElement.style.stroke = color;
          break;
        default:
          // Default to fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
      }
    }

    // Function to stop blinking
    function stopBlinking() {
      if (myCheckInterval) {
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
      isBlinking = false;
    }

    // Clean up event listeners when widget is destroyed
    function cleanup() {
      stopBlinking();
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    }

    // Initialize the SVG
    init();

    // Ensure cleanup when SVG is removed
    const cleanupObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.removedNodes.forEach((node) => {
          if (node.id === 'Layer_1') {
            cleanup();
            cleanupObserver.disconnect();
          }
        });
      });
    });
    cleanupObserver.observe(document.body, { childList: true, subtree: true });
  ]]>
  </script>
</svg>
