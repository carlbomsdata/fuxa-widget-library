<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="17.710434mm"
   height="9.5732927mm"
   viewBox="0 0 17.710434 9.5732927"
   version="1.1"
   id="Layer_1"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs1" /><g
     id="layer5"
     transform="translate(-185.16618,-70.640667)"><g
       id="g293"><g
         id="g252"
         transform="translate(19.715356,0.36174965)"><path
           style="fill:#d4d4d4;fill-opacity:1"
           d="m 166.67862,78.7013 -0.7276,-0.625773 V 77.79442 77.513314 l 0.89114,-0.94488 0.89113,-0.944881 h 0.69637 0.69636 V 74.316252 73.00895 l -0.26458,-0.163522 -0.26459,-0.163521 V 71.77148 70.861053 h 4.89479 4.8948 v 0.778136 0.778135 l -0.26459,0.163521 -0.26458,0.163522 v 1.439593 1.439593 h 1.94337 1.94337 l 0.38919,0.463021 0.3892,0.463021 0.0701,1.005423 0.0701,1.005423 -0.31839,0.383639 -0.31839,0.38364 -7.30979,-3.23e-4 -7.30979,-3.24e-4 z"
           id="path262" /><path
           style="fill:#c2c2c2;fill-opacity:1"
           d="m 166.67862,78.7013 -0.7276,-0.625773 V 77.79442 77.513314 l 0.89114,-0.94488 0.89113,-0.944881 h 0.69637 0.69636 V 74.316252 73.00895 l -0.26458,-0.163522 -0.26459,-0.163521 V 71.77148 70.861053 h 4.21576 4.21576 l 0.11022,0.727605 0.11023,0.727604 0.0396,-0.727604 0.0396,-0.727605 h 0.52917 0.52917 v 0.778136 0.778135 l -0.26459,0.163521 -0.26458,0.163522 v 1.439593 1.439593 h 1.94337 1.94337 l 0.38919,0.463021 0.3892,0.463021 0.0701,1.005423 0.0701,1.005423 -0.31839,0.383639 -0.31839,0.38364 -7.30979,-3.23e-4 -7.30979,-3.24e-4 z"
           id="path261" /><path
           style="fill:#b0b0b0;fill-opacity:1"
           d="m 166.67862,78.7013 -0.7276,-0.625773 V 77.79442 77.513314 l 0.89114,-0.94488 0.89113,-0.944881 h 0.69637 0.69636 V 74.316252 73.00895 l -0.26458,-0.163522 -0.26459,-0.163521 V 71.77148 70.861053 h 4.09348 4.09348 l 0.24828,0.859896 0.24829,0.859896 0.0239,-0.859896 0.0239,-0.859896 h 0.52917 0.52917 v 0.778136 0.778135 l -0.26459,0.163521 -0.26458,0.163522 v 1.439593 1.439593 h 1.94337 1.94337 l 0.38919,0.463021 0.3892,0.463021 0.0701,1.005423 0.0701,1.005423 -0.31839,0.383639 -0.31839,0.38364 -7.30979,-3.23e-4 -7.30979,-3.24e-4 z m 8.72574,-5.618849 -0.15985,-0.159853 -0.34727,0.138965 -0.34726,0.138964 0.50712,0.02089 0.50711,0.02089 z"
           id="path260" /><path
           style="fill:#9e9e9e;fill-opacity:1"
           d="m 167.05662,78.666261 -0.5203,-0.661458 h -0.30827 -0.30826 l 0.16619,-0.268899 0.16619,-0.268899 0.2463,0.152222 0.2463,0.152223 v -0.393287 -0.393286 l 0.69714,-0.54837 0.69714,-0.54837 h 0.62578 0.62577 v -1.5875 -1.5875 h -0.26458 -0.26458 v -0.965661 -0.965661 l 2.44739,0.169411 2.4474,0.169411 0.43928,0.531667 0.43929,0.531666 h 0.5529 0.5529 v -0.529167 -0.529166 h 0.52917 0.52917 v 0.683507 0.683507 l 0.33073,-0.108599 0.33072,-0.108599 0.0837,-0.7072 0.0837,-0.7072 h 0.24701 0.24701 v 0.778136 0.778135 l -0.26458,0.163521 -0.26458,0.163522 v 1.571885 1.571885 h 1.98437 1.98438 l 0.52916,0.529166 0.52917,0.529167 v 0.661458 0.661458 l -0.52917,0.529167 -0.52916,0.529167 h -6.99226 -6.99225 z m 9.93407,-4.956198 -0.10707,-0.864635 -0.003,1.5875 -0.003,1.5875 0.10977,-0.722865 0.10976,-0.722866 z m -1.26868,-0.0047 0.0186,-0.727604 -2.05052,0.02274 -2.05052,0.02274 0.72594,0.218514 0.72594,0.218514 1.12614,0.936074 1.12615,0.936073 0.17984,-0.449725 0.17984,-0.449725 z"
           id="path259" /><path
           style="fill:#8c8c8c;fill-opacity:1"
           d="m 167.4127,78.968295 -0.49154,-0.359424 V 77.73644 76.864009 l 0.60257,-0.487936 0.60258,-0.487936 h 0.63215 0.63214 v -1.571885 -1.571885 l -0.26458,-0.163522 -0.26458,-0.163521 v -0.812973 -0.812972 l 1.09646,0.147066 1.09647,0.147067 0.22215,0.350792 0.22215,0.350791 0.084,0.239149 0.084,0.239149 2.16924,0.125575 2.16925,0.125576 v 0.230588 0.230588 h -2.64584 -2.64583 v 0.862397 0.862397 l 0.56803,0.35474 0.56803,0.354741 -0.36959,0.234019 -0.3696,0.23402 2.31511,0.0041 2.3151,0.0041 v -1.182322 -1.182321 l 0.39688,0.152296 0.39687,0.152295 v 1.030026 1.030026 h 0.26459 0.26458 V 74.432928 72.97772 h -0.26458 -0.26459 v -0.264583 -0.264584 h 0.51241 0.5124 l 0.1116,-0.859895 0.11161,-0.859896 -0.1339,2.579687 -0.13389,2.579688 h 2.00423 2.00422 l 0.54837,0.697139 0.54837,0.69714 v 0.37322 0.37322 l -0.64943,0.649432 -0.64943,0.649432 h -6.70834 -6.70833 z m 12.29665,-0.963492 v -0.79375 l -0.99218,0.02386 -0.99219,0.02386 0.85989,0.248286 0.8599,0.248286 v 0.257018 0.257018 l -2.97656,0.03458 -2.97657,0.03458 -1.98437,0.18722 -1.98438,0.187221 5.09323,0.04278 5.09323,0.04278 z"
           id="path258" /><path
           style="fill:#7a7a7a;fill-opacity:1"
           d="m 167.42513,78.911946 -0.41578,-0.415774 v -0.900348 -0.900348 l 0.78061,-0.40367 0.78061,-0.403669 h 0.54231 0.54231 V 74.448543 73.00895 l -0.26459,-0.163522 -0.26458,-0.163521 v -0.938734 -0.938734 l 0.41851,0.160599 0.41852,0.160599 h 0.24294 0.24295 v 0.661458 0.661458 h 2.64583 2.64583 v 0.264584 0.264583 h -2.64583 -2.64583 v 1.417517 1.417516 l 1.62631,0.169984 1.62631,0.169983 h 1.15181 1.15182 v 0.396875 0.396875 h -1.05834 -1.05833 v 0.264583 0.264583 h 0.36448 0.36448 l 0.32937,0.396875 0.32938,0.396875 h -2.79491 -2.7949 l -0.16353,0.264584 -0.16352,0.264583 h 5.1472 5.1472 l 0.10027,-1.051438 0.10027,-1.051439 -0.19091,0.191543 -0.19091,0.191542 -1.46907,-0.09063 -1.46907,-0.09063 V 76.525108 76.15272 h 0.26459 0.26458 v -1.5875 -1.5875 h -0.26458 -0.26459 v -0.264583 -0.264584 h 0.52917 0.52917 l 0.0396,-0.859895 0.0396,-0.859896 0.11334,0.759836 0.11333,0.759836 -0.28527,0.285268 -0.28527,0.285268 v 1.534583 1.534584 h 1.92551 1.9255 l 0.58804,0.411877 0.58804,0.411878 v 0.896036 0.896036 l -0.58804,0.411878 -0.58804,0.411878 h -6.6691 -6.66911 z m 2.23006,-1.965476 v -0.264584 h -0.2802 -0.2802 l 0.16352,0.264584 0.16352,0.264583 h 0.11668 0.11668 z m 6.08946,0.859896 0.004,-0.463021 0.19746,0.264583 0.19746,0.264583 0.23946,0.198438 0.23946,0.198437 h -0.44097 -0.44098 z"
           id="path257" /><path
           style="fill:#686868;fill-opacity:1"
           d="m 167.4583,78.856098 -0.44895,-0.496087 v -0.687872 -0.687872 l 0.40538,-0.40538 0.40538,-0.40538 0.91754,-0.172131 0.91754,-0.172131 0.0116,-0.301283 0.0116,-0.301284 0.38128,1.058334 0.38128,1.058333 0.004,0.463021 0.004,0.46302 h -0.52917 -0.52917 v 0.264584 0.264583 h 5.26503 5.26502 l 0.0947,-1.190625 0.0947,-1.190625 h -0.17829 -0.1783 l -0.10691,0.320734 -0.10691,0.320734 -1.3042,-0.07659 -1.3042,-0.07658 -0.26237,-0.255166 -0.26238,-0.255166 0.39467,-0.264414 0.39466,-0.264414 2.24896,0.169875 2.24896,0.169876 0.33073,0.270245 0.33073,0.270244 v 0.710784 0.710783 l -0.37521,0.513591 -0.3752,0.51359 -6.84876,0.07838 -6.84876,0.07838 z m 0.74168,-0.322128 -0.16352,-0.264584 h -0.26459 -0.26458 l 0.16352,0.264584 0.16352,0.264583 h 0.26459 0.26458 z m 12.94933,0.02467 0.14827,-0.239908 -0.52953,0.138475 -0.52953,0.138476 v 0.101433 0.101433 h 0.38126 0.38126 z m -11.22954,-1.339287 v -0.785446 l -0.36449,0.139867 -0.36449,0.139867 0.29835,0.643515 0.29834,0.643515 0.0661,0.0021 0.0661,0.0021 z m 0.52917,-0.669762 V 76.15272 h 2.64583 2.64583 v 0.396875 0.396875 h -2.64583 -2.64583 z m -1.12448,-3.722978 -0.19844,-0.201675 V 71.690081 70.75522 l 0.28386,0.283856 0.28385,0.283856 -0.0854,0.85268 -0.0854,0.85268 z m 1.25677,-0.11348 -0.16352,-0.264584 h 2.66144 2.66145 v 0.264584 0.264583 h -2.49792 -2.49793 z m 6.21771,0 v -0.264584 h 0.39687 0.39688 l 0.0396,-0.859895 0.0396,-0.859896 0.11177,0.743604 0.11177,0.743604 -0.3161,0.380875 -0.3161,0.380875 h -0.23219 -0.23218 z"
           id="path256" /><path
           style="fill:#575757;fill-opacity:1"
           d="m 167.73696,79.041944 -0.46302,-0.269685 v -0.304353 -0.304353 l 0.3175,0.3175 0.3175,0.3175 0.27781,-0.0088 0.27781,-0.0088 -0.54203,-0.454218 -0.54204,-0.454219 -0.16772,-0.438161 -0.16773,-0.438162 0.44518,-0.389506 0.44517,-0.389507 0.8599,-0.118695 0.8599,-0.118696 v 0.21876 0.218759 h -0.39688 -0.39687 v 0.248969 0.248968 l 0.29001,0.179239 0.29002,0.179239 -0.1119,0.762417 -0.1119,0.762418 h 5.89168 5.89169 l 0.17008,-0.275188 0.17007,-0.275188 -0.7149,0.179428 -0.7149,0.179429 0.10441,-1.094865 0.10441,-1.094866 h -0.21373 -0.21373 l -0.12671,0.330729 -0.12671,0.330729 -1.3202,-0.09168 -1.32019,-0.09168 V 76.524059 76.15272 h 2.36235 2.36235 l 0.41577,0.415774 0.41578,0.415773 v 0.623356 0.623356 l -0.69714,0.548371 -0.69714,0.54837 -6.38047,-0.008 -6.38046,-0.008 z m 2.97656,-2.545273 V 76.15272 h 2.51354 2.51354 v 0.365652 0.365652 l -2.51354,-0.0217 -2.51354,-0.0217 z m 0,-3.763671 v -0.284447 h 2.55764 2.55764 l -0.11025,0.09877 -0.11024,0.09876 -2.44739,0.185682 -2.4474,0.185682 z m 6.21771,-0.01986 -0.16352,-0.264584 h 0.4281 0.42811 l -0.16353,0.264584 -0.16352,0.264583 h -0.10106 -0.10106 z m -7.80521,-0.926042 v -0.926042 h 0.10334 0.10335 l 0.10811,0.926042 0.10811,0.926042 h -0.21146 -0.21145 z"
           id="path255" /><path
           style="fill:#454545;fill-opacity:1"
           d="m 167.73696,79.054956 -0.46302,-0.282697 v -0.283833 -0.283833 l 0.33073,0.273043 0.33072,0.273043 6.64841,0.03439 6.64842,0.03439 0.16366,-0.426496 0.16366,-0.426496 -0.27294,-0.51 -0.27295,-0.509999 -0.45371,0.008 -0.45371,0.008 0.46302,0.269685 0.46302,0.269685 v 0.352869 0.352869 l -0.52917,0.13838 -0.52916,0.13838 v -0.777505 -0.777506 l 0.59531,-0.239287 0.59531,-0.239286 -0.85989,-0.01677 -0.8599,-0.01677 -0.0209,0.463021 -0.0209,0.463021 -0.13345,-0.330729 -0.13345,-0.33073 h -1.16858 -1.16857 V 76.417303 76.15272 h 2.24895 2.24896 l 0.52917,0.529166 0.52917,0.529167 v 0.367564 0.367563 l -0.50555,0.624624 -0.50554,0.624624 -6.57206,0.07111 -6.57206,0.07111 z m 13.03073,-1.314736 v -0.264584 h -0.26459 -0.26458 v 0.264584 0.264583 h 0.26458 0.26459 z m -12.97865,0.379933 -0.29608,-0.356753 0.15672,-0.253575 0.15672,-0.253576 -0.33238,-0.138268 -0.33238,-0.138268 0.51359,-0.413497 0.5136,-0.413496 0.80932,0.02637 0.80933,0.02637 -0.63043,0.176668 -0.63043,0.176668 0.43199,0.358522 0.43199,0.358522 -1.8e-4,0.562915 -1.9e-4,0.562916 -0.65256,0.03761 -0.65255,0.03761 z m 1.21169,-0.858001 -0.14811,-0.148113 -0.32632,0.328766 -0.32632,0.328766 0.47443,-0.180654 0.47443,-0.180653 z m 1.71279,-0.712557 V 76.15272 h 2.52916 2.52915 l -0.16619,0.268899 -0.16618,0.268899 -0.24631,-0.152222 -0.2463,-0.152223 v 0.312595 0.312595 l -0.37114,-0.308023 -0.37115,-0.308023 -0.13788,0.341772 -0.13787,0.341772 -0.30487,-0.396875 -0.30487,-0.396874 -0.13788,0.341772 -0.13788,0.341772 -0.39131,-0.324759 -0.39131,-0.324759 -0.21239,0.343654 -0.21239,0.343654 -0.16432,-0.360667 -0.16432,-0.360667 -0.15434,0.330729 -0.15434,0.330729 h -0.24254 -0.24253 z m -1.5875,-4.7625 v -0.926042 h 0.10334 0.10335 l 0.10811,0.926042 0.10811,0.926042 h -0.21146 -0.21145 z m 2.71198,0.731563 1.25677,-0.0991 1.25677,0.0991 1.25677,0.0991 h -2.51354 -2.51354 z"
           id="path254" /><path
           style="fill:#333333;fill-opacity:1"
           d="m 167.43582,78.846428 -0.13394,-0.216709 0.77978,0.114447 0.77978,0.114447 v 0.102262 0.102261 h -0.64585 -0.64584 z m 13.70984,-0.199065 0.41578,-0.415774 v -0.790466 -0.790466 l 0.26458,0.163521 0.26458,0.163522 v 0.626944 0.626945 l -0.41577,0.415774 -0.41577,0.415773 h -0.26459 -0.26458 z m -13.48573,-0.660163 -0.1744,-0.282186 0.17317,-0.173172 0.17318,-0.173172 0.27034,0.389212 0.27034,0.389213 0.13419,-0.330729 0.1342,-0.33073 h 0.37483 0.37482 v 0.236276 0.236276 l -0.41851,0.160599 -0.41852,0.160599 h -0.35962 -0.35962 z m 12.3447,-0.313126 0.0307,-0.595313 0.12474,0.482448 0.12474,0.482448 0.38748,-0.148688 0.38747,-0.148688 -0.16164,0.261553 -0.16165,0.261552 h -0.38126 -0.38126 z m -12.73069,-0.784441 v -0.189128 l 0.54225,-0.290204 0.54225,-0.290204 0.71452,0.10896 0.71452,0.10896 -0.77818,0.03964 -0.77817,0.03964 0.4523,0.330729 0.4523,0.330729 h -0.9309 -0.93089 z m 4.56406,-0.666809 1.25677,-0.0991 1.25677,0.0991 1.25677,0.0991 h -2.51354 -2.51354 z m 5.95312,7.5e-4 1.12448,-0.10128 1.12448,0.10128 1.12448,0.10128 h -2.24896 -2.24896 z m -8.56204,-3.88807 -0.14491,-0.377633 0.0986,-0.614555 0.0986,-0.614554 0.13381,0.992187 0.13381,0.992188 h -0.0875 -0.0875 z"
           id="path253" /></g><g
         id="g292"
         transform="translate(19.715356,0.36174965)"><path
           id="shape"
           style="opacity:0.647761;fill:none;fill-opacity:1;stroke:#000000;stroke-linejoin:bevel"
           d="m 169.28138,70.729001 -0.0129,0.08113 -0.0946,-0.0067 -0.0481,-0.04806 v 0.04444 l -0.26458,-0.01809 v 0.0098 0.06976 h -0.26459 v 0.910022 0.910539 l 0.26459,0.163814 0.26458,0.163298 v 1.307413 1.307414 h -0.69608 -0.6966 l -0.8909,0.944645 -0.89142,0.944646 v 0.281119 0.160714 l -0.031,0.05013 h 0.031 v 0.07028 l 0.7276,0.625802 0.72761,0.625801 h 5.2e-4 0.16949 l 0.001,10e-4 h 0.30799 l 0.0222,0.02429 2.12287,-0.02429 h 4.53874 0.0434 6.34845 1.06505 l 0.31833,-0.383956 0.31832,-0.383439 -0.0429,-0.61805 V 77.65571 77.608168 76.94671 l -0.0744,-0.07441 -0.0227,-0.322461 -0.38912,-0.463021 -0.38913,-0.463021 h -1.94355 -1.94303 v -1.439705 -1.439706 l 0.26406,-0.163297 0.26459,-0.163814 h 5.1e-4 v -0.778248 -0.77773 h -5.1e-4 -0.61082 l 0.007,-0.132292 -0.0171,0.132292 h -0.0734 l -0.0196,-0.132292 -0.006,0.132292 h -0.33797 -0.29972 -0.24443 -3.2923 -3.48196 l -0.71675,-0.04961 z" /></g></g></g>


<script type="text/javascript">
  <![CDATA[
    // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
    let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#ffffff';
    let _pc_state1Colour     = '#00ff00';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    let _pn_strokeWidth      = 1;     
    let _pn_opacity          = 0.60;  
    let _pn_indicationMode   = 0;     
    //!export-end
    
    // Internal state variables
    let stateNumber = 0;
    let isBlinking = false;
    let myCheckInterval;
    
    // Force global timing mechanism by using epoch time
    function getGlobalBlinkState(interval) {
      // Use the current time divided by interval, which will give
      // the same result for all SVGs at the same moment
      return Math.floor(Date.now() / interval) % 2 === 0;
    }
    
    // Function to update the color based on the set state
    function logic() {
      switch (stateNumber) {
        case 0: // off
          setColors(_pc_state0Colour);
          stopBlinking();
          break; 
        case 1: // run
          setColors(_pc_state1Colour);
          stopBlinking();
          break;
        case 2: // warning
          setColors(_pc_state2Colour);
          stopBlinking();
          break;
        case 3: // fault
          startForceSync();
          break;
        case 4: // invalid 
          setColors(_pc_state4Colour);
          stopBlinking();
          break;
        case 5: // spare
          setColors(_pc_state5Colour);
          stopBlinking();
          break;
        default:
          console.log('Undefined State');
          stopBlinking();
      }
    }

    // Initial setup
    function init() {
      // Set up visibility change listener
      document.addEventListener('visibilitychange', handleVisibilityChange);
      
      // Initial state rendering
      logic(); 
    }
    
    // Handler for tab visibility changes
    function handleVisibilityChange() {
      if (document.visibilityState === 'visible' && isBlinking) {
        // Resume checking when tab becomes visible again
        startForceSync();
      } else if (document.visibilityState === 'hidden' && isBlinking) {
        // Pause checking when tab is hidden
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
    }
    
    // Update the blinking display based on global time
    function updateBlinkDisplay() {
      if (!isBlinking) return;
      
      // Get the global blink state
      const showFaultColor = getGlobalBlinkState(_pn_setInterval);
      
      // Set the appropriate color
      if (showFaultColor) {
        setColors(_pc_state3Colour);
      } else {
        setColors(_pc_state0Colour);
      }
    }
    
    // Start forced synchronization
    function startForceSync() {
      // Clear any existing interval
      stopBlinking();
      
      // Set blinking state
      isBlinking = true;
      
      // Update display immediately
      updateBlinkDisplay();
      
      // Check very frequently to ensure tight synchronization (every 16ms = ~60fps)
      myCheckInterval = setInterval(updateBlinkDisplay, 16);
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
      if (id === '_pn_setInterval')    _pn_setInterval    = value;
      if (id === '_pc_state0Colour')   _pc_state0Colour   = value;
      if (id === '_pc_state1Colour')   _pc_state1Colour   = value;
      if (id === '_pc_state2Colour')   _pc_state2Colour   = value;
      if (id === '_pc_state3Colour')   _pc_state3Colour   = value;
      if (id === '_pc_state4Colour')   _pc_state4Colour   = value;
      if (id === '_pc_state5Colour')   _pc_state5Colour   = value;
      if (id === '_pn_lightShade')     _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade')      _pn_darkShade      = value;
      if (id === '_pn_shadowShade')    _pn_shadowShade    = value;
      if (id === '_pn_strokeWidth')    _pn_strokeWidth    = value;
      if (id === '_pn_opacity')        _pn_opacity        = value;
      if (id === '_pn_indicationMode') _pn_indicationMode = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Function to update the fill and/or stroke color based on indication mode
    function setColors(color) {
      // Get the single element with ID "shape"
      const shapeElement = document.getElementById('shape');
      if (!shapeElement) return; // Safety check
      
      // Set opacity
      shapeElement.style.opacity = _pn_opacity;
      
      // Set stroke width
      shapeElement.style.strokeWidth = _pn_strokeWidth;
      
      // Apply colors based on indication mode
      switch(_pn_indicationMode) {
        case 0: // Fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
          break;
        case 1: // Stroke only
          shapeElement.style.fill = "none";
          shapeElement.style.stroke = color;
          break;
        case 2: // Both fill and stroke
          shapeElement.style.fill = color;
          shapeElement.style.stroke = color;
          break;
        default:
          // Default to fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
      }
    }

    // Function to stop blinking
    function stopBlinking() {
      if (myCheckInterval) {
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
      isBlinking = false;
    }

    // Clean up event listeners when widget is destroyed
    function cleanup() {
      stopBlinking();
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    }

    // Initialize the SVG
    init();

    // Ensure cleanup when SVG is removed
    const cleanupObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.removedNodes.forEach((node) => {
          if (node.id === 'Layer_1') {
            cleanup();
            cleanupObserver.disconnect();
          }
        });
      });
    });
    cleanupObserver.observe(document.body, { childList: true, subtree: true });
  ]]>
  </script>
</svg>
