<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="14.815649mm"
   height="9.5458441mm"
   viewBox="0 0 14.815649 9.5458441"
   version="1.1"
   id="Layer_1"
   xml:space="preserve"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs1" /><g
     id="layer4"
     transform="translate(-182.76111,-49.825993)"><g
       id="g283"><g
         id="g262"
         transform="translate(16.459609)"><path
           style="fill:#d4d4d4;fill-opacity:1"
           d="m 168.9403,58.32574 v -0.529167 h -0.64256 -0.64256 L 167.23941,57.3808 166.82364,56.965026 V 54.2058 51.446574 l 0.56473,-0.564733 0.56473,-0.564734 5.95769,0.127421 5.95768,0.127421 0.35675,0.487882 0.35675,0.487882 v 2.536392 2.536392 l -0.43611,0.622634 -0.43611,0.622635 -1.68056,-0.156933 -1.68055,-0.156933 v 0.651503 0.651504 h -3.70417 -3.70417 z"
           id="path272" /><path
           style="fill:#c2c2c2;fill-opacity:1"
           d="m 168.9403,58.32574 v -0.529167 h -0.64256 -0.64256 L 167.23941,57.3808 166.82364,56.965026 V 54.2058 51.446574 l 0.56473,-0.564733 0.56473,-0.564734 5.95769,0.127421 5.95768,0.127421 0.35675,0.487882 0.35675,0.487882 v 2.536392 2.536392 l -0.43611,0.622634 -0.43611,0.622635 -1.68056,-0.156933 -1.68055,-0.156933 v 0.651503 0.651504 h -3.70417 -3.70417 z m 10.58334,-5.820833 v -1.058333 l 0.0473,-0.198438 0.0473,-0.198437 -0.46513,-0.08958 -0.46514,-0.08958 -0.6365,0.159752 -0.6365,0.159751 -0.165,0.657429 -0.16501,0.657429 -2.81559,0.05619 -2.81558,0.05619 2.84427,0.08505 2.84427,0.08505 v 0.23966 0.239661 l 0.99218,0.103786 0.99219,0.103786 0.19844,0.04448 0.19844,0.04448 z"
           id="path271" /><path
           style="fill:#b0b0b0;fill-opacity:1"
           d="m 168.9403,58.32574 v -0.529167 h -0.64256 -0.64256 L 167.23941,57.3808 166.82364,56.965026 V 54.2058 51.446574 l 0.57877,-0.578776 0.57878,-0.578776 0.10473,0.314192 0.10473,0.314193 h 4.61747 4.61747 l -0.23814,0.463021 -0.23814,0.463021 0.11657,0.324683 0.11657,0.324683 -4.84868,0.07854 -4.84867,0.07854 4.82864,0.05979 4.82865,0.05979 v 0.362038 0.362037 l 1.11941,0.150145 1.11942,0.150145 0.11561,-0.115613 0.11561,-0.115614 0.12442,-1.500265 0.12441,-1.500265 0.36035,0.492807 0.36035,0.492808 v 2.536392 2.536392 l -0.43611,0.622634 -0.43611,0.622635 -1.68056,-0.156933 -1.68055,-0.156933 v 0.651503 0.651504 h -3.70417 -3.70417 z m 7.07171,-4.955592 -0.99809,-0.104138 -0.854,0.106272 -0.85399,0.106272 1.85208,-0.0021 1.85209,-0.0021 z"
           id="path270" /><path
           style="fill:#9e9e9e;fill-opacity:1"
           d="m 168.9403,58.32574 v -0.529167 h -0.62045 -0.62045 l -0.43788,-0.483854 -0.43788,-0.483854 V 54.29165 51.754436 l 0.1606,-0.418514 0.1606,-0.418515 5.06492,0.05709 5.06492,0.05709 -4.89479,0.141349 -4.89479,0.14135 -0.0837,0.727604 -0.0837,0.727604 h 4.91236 4.91237 v 0.264584 0.264583 l -4.16719,0.04579 -4.16719,0.04579 4.7625,0.191417 4.7625,0.191418 0.56981,0.183857 0.5698,0.183858 0.13847,-0.487209 0.13847,-0.48721 0.18074,-1.159136 0.18073,-1.159136 0.23142,0.365386 0.23142,0.365386 0.004,2.520816 0.004,2.520816 -0.43611,0.622634 -0.43611,0.622635 -1.68056,-0.156933 -1.68055,-0.156933 v 0.651503 0.651504 h -3.70417 -3.70417 z m -1.32291,-6.085416 V 51.97574 h 4.7625 4.7625 v 0.264584 0.264583 h -4.7625 -4.7625 z m 2.3151,-0.7263 2.4474,-0.08731 2.44739,0.08731 2.4474,0.08731 h -4.89479 -4.89479 z"
           id="path269" /><path
           style="fill:#8c8c8c;fill-opacity:1"
           d="m 169.20489,58.334304 v -0.537731 h -0.66146 -0.66146 l -0.52917,-0.529166 -0.52916,-0.529167 0.004,-2.447396 0.004,-2.447395 0.25648,-0.396875 0.25648,-0.396875 0.004,0.859895 0.004,0.859896 h 4.74689 4.74688 l 0.16353,0.264584 0.16352,0.264583 -4.97656,0.05964 -4.97655,0.05964 4.74298,0.07895 4.74297,0.07895 0.28411,0.228373 0.28411,0.228374 1.1239,0.185364 1.12389,0.185365 0.11313,-0.353887 0.11312,-0.353887 0.16902,-1.261892 0.16902,-1.261891 0.24761,0.153027 0.2476,0.153027 v 2.571347 2.571347 l -0.43611,0.622634 -0.43611,0.622635 -1.68056,-0.156933 -1.68055,-0.156933 v 0.626937 0.626936 l -3.57188,0.03313 -3.57187,0.03313 z m 4.16718,-3.111721 -0.99218,-0.103786 -0.99219,0.103786 -0.99219,0.103786 h 1.98438 1.98437 z m 1.32292,-0.79801 -2.3151,-0.08819 -2.31511,0.08819 -2.3151,0.08818 h 4.63021 4.63021 z m -7.0776,-2.184249 V 51.97574 h 4.61459 4.61459 l 0.16353,0.264584 0.16352,0.264583 h -4.77812 -4.77811 z m 2.3151,-0.7263 2.4474,-0.08731 2.44739,0.08731 2.4474,0.08731 h -4.89479 -4.89479 z"
           id="path268" /><path
           style="fill:#7a7a7a;fill-opacity:1"
           d="m 172.60717,58.657423 -3.34459,-0.08248 -0.13637,-0.521477 -0.13637,-0.521477 h -0.80921 -0.80921 l -0.27389,-0.511773 -0.27389,-0.511772 0.004,-2.200207 0.004,-2.200206 0.25648,-0.396875 0.25648,-0.396875 0.004,1.096172 0.004,1.096171 0.41852,0.160599 0.41851,0.160599 h 4.5292 4.52919 l -0.25808,0.258081 -0.25808,0.25808 -4.49119,0.08316 -4.49119,0.08316 5.55625,0.03231 5.55625,0.03231 0.38636,0.08946 0.38636,0.08946 0.23222,-1.654882 0.23221,-1.654883 0.24132,0.149144 0.24132,0.149143 v 2.439055 2.439055 l -0.43611,0.622634 -0.43611,0.622635 -1.68056,-0.156933 -1.68055,-0.156933 v 0.651503 0.651504 l -0.19844,-0.0575 -0.19844,-0.0575 z m 2.08782,-3.4391 -2.3151,-0.08818 -2.31511,0.08818 -2.3151,0.08819 h 4.63021 4.63021 z m -7.0776,-2.184249 V 52.76949 h 4.63021 4.6302 v 0.264584 0.264583 h -4.6302 -4.63021 z m 2.16943,-0.725972 2.30172,-0.08799 2.46078,0.08749 2.46078,0.08749 -4.7625,5.05e-4 -4.7625,5.05e-4 z m 0.26458,-0.79375 2.30172,-0.08799 2.46078,0.08749 2.46078,0.08749 -4.7625,5.05e-4 -4.7625,5.05e-4 z"
           id="path267" /><path
           style="fill:#686868;fill-opacity:1"
           d="M 175.81947,58.590323 V 58.32574 h -3.30729 -3.30729 V 57.928865 57.53199 h -0.93259 -0.93259 l -0.25804,-0.678683 -0.25803,-0.678682 0.0313,-2.033297 0.0313,-2.033296 0.16938,0.79375 0.16938,0.79375 5.02483,0.141146 5.02484,0.141147 -1.5875,0.07465 -1.5875,0.07465 -3.17071,0.132697 -3.17071,0.132696 -0.11454,0.114532 -0.11453,0.114531 4.60816,0.01932 4.60816,0.01931 1.40176,0.199462 1.40176,0.199462 0.13941,-0.225579 0.13942,-0.22558 0.14878,-1.441579 0.14879,-1.44158 0.22827,0.14108 0.22827,0.14108 v 2.306764 2.306763 l -0.43611,0.622634 -0.43611,0.622635 -1.68056,-0.156933 -1.68055,-0.156933 v 0.651503 0.651504 h -0.26459 -0.26458 z m -6.01563,-2.567498 -0.59168,-0.114186 -0.73124,0.110574 -0.73124,0.110574 1.32292,0.0036 1.32291,0.0036 z m 6.34636,-0.0052 -0.8599,-0.106712 -0.85989,0.106712 -0.8599,0.106712 h 1.71979 1.7198 z m -1.32292,-0.799484 -2.44739,-0.08731 -2.4474,0.08731 -2.44739,0.08731 h 4.89479 4.89479 z m -7.21041,-2.117972 -5.2e-4,-0.198437 3.10937,0.06926 3.10938,0.06926 1.5875,0.0782 1.5875,0.0782 -4.69636,0.05098 -4.69635,0.05098 z m 2.05104,-0.791767 1.91823,-0.09131 1.91823,0.09131 1.91823,0.09131 h -3.83646 -3.83646 z"
           id="path266" /><path
           style="fill:#575757;fill-opacity:1"
           d="m 172.57832,58.392624 -3.37343,-0.08269 v -0.372206 -0.372207 l -0.85387,-0.08291 -0.85386,-0.08291 -0.33286,-0.661458 -0.33286,-0.661458 0.017,-1.719792 0.017,-1.719791 0.0883,0.264583 0.0883,0.264583 0.16048,0.727604 0.16048,0.727604 h 4.88975 4.88975 v 0.258615 0.258615 l -4.69636,0.08973 -4.69635,0.08973 5.95312,-0.0089 5.95313,-0.0089 0.19439,-0.273298 0.19438,-0.273299 0.004,-1.256771 0.004,-1.25677 h 0.26459 0.26458 l -0.004,2.05052 -0.004,2.050521 -0.34048,0.661458 -0.34047,0.661459 -1.77229,-0.04084 -1.77229,-0.04084 v 0.503858 0.503857 l -0.19844,-0.0575 -0.19844,-0.0575 z m 2.23558,-2.38086 -2.46078,-0.08749 -2.30172,0.08799 -2.30172,0.08799 4.7625,-5.04e-4 4.7625,-5.05e-4 z m -5.02708,-2.116162 2.30172,-0.08799 2.46078,0.08749 2.46078,0.08749 -4.7625,5.05e-4 -4.7625,5.05e-4 z m -0.78037,-0.792469 1.52135,-0.09547 1.52136,0.09547 1.52135,0.09547 h -3.04271 -3.0427 z m 5.82587,0.01217 0.46805,-0.12197 0.3257,0.131774 0.32569,0.131774 -0.79375,-0.0098 -0.79375,-0.0098 z"
           id="path265" /><path
           style="fill:#454545;fill-opacity:1"
           d="M 169.46947,57.790629 V 57.53199 h -0.89364 -0.89365 l -0.32117,-0.386991 -0.32118,-0.38699 -0.11391,-1.66353 -0.1139,-1.663531 0.26186,0.595313 0.26187,0.595312 h 4.77103 4.77102 v 0.264584 0.264583 h -4.64582 -4.64582 l 0.15385,0.248939 0.15385,0.24894 6.07947,-0.03647 6.07947,-0.03647 0.004,-1.072365 0.004,-1.072365 0.27838,-0.396874 0.27839,-0.396875 -0.10867,2.222179 -0.10867,2.22218 -0.49987,0.365511 -0.49986,0.365511 -1.78866,-0.07415 -1.78865,-0.07415 -0.002,-0.198438 -0.002,-0.198437 h -0.67707 -0.67708 l 0.1987,0.330729 0.1987,0.330729 -0.45888,-0.372432 -0.45888,-0.372433 -0.31952,0.345102 -0.31951,0.345102 0.31245,-0.175423 0.31244,-0.175423 0.13308,0.215322 0.13307,0.215321 -2.36375,0.04763 -2.36375,0.04763 z m 5.35781,-1.778688 -2.44739,-0.08731 -2.4474,0.08731 -2.44739,0.08731 h 4.89479 4.89479 z m -5.04046,-2.116339 2.30172,-0.08799 2.46078,0.08749 2.46078,0.08749 -4.7625,5.05e-4 -4.7625,5.05e-4 z"
           id="path264" /><path
           style="fill:#333333;fill-opacity:1"
           d="m 176.34864,57.479943 -1.45521,-0.254769 -3.63565,0.117236 -3.63564,0.117236 -0.24995,-0.301171 -0.24995,-0.301171 -0.16183,-1.448595 -0.16184,-1.448594 0.39664,0.859896 0.39663,0.859896 h 5.58216 5.58217 l 0.78061,0.403669 0.78061,0.40367 v 0.23889 0.23889 l -0.41578,0.415774 -0.41577,0.415773 -0.841,-0.03093 -0.84099,-0.03093 z m -1.65365,-0.67412 -2.3151,-0.08818 -2.31511,0.08818 -2.3151,0.08819 h 4.63021 4.63021 z m 0.13229,-0.793882 -2.44739,-0.08731 -2.4474,0.08731 -2.44739,0.08731 h 4.89479 4.89479 z m -7.21049,-1.059638 -6e-4,-0.198438 1.91883,0.07242 1.91883,0.07242 0.79375,0.08367 0.79375,0.08367 -2.71198,0.04234 -2.71198,0.04234 z m 2.17003,-1.056701 2.30172,-0.08799 2.46078,0.08749 2.46078,0.08749 -4.7625,5.05e-4 -4.7625,5.05e-4 z"
           id="path263" /></g><g
         id="g282"
         transform="translate(16.459609)"><path
           id="shape"
           style="opacity:0.61194;fill:none;fill-opacity:1;stroke:#000000;stroke-linejoin:bevel"
           d="m 167.98133,50.28892 -0.0284,0.02842 -0.55036,0.550354 -0.0139,0.01395 -0.0382,0.03824 -0.20567,-0.0026 -0.12919,0.337447 -0.19172,0.191719 v 0.307992 1.703255 l -0.0119,-0.02687 0.0119,0.173633 v 0.410828 l -0.0253,-0.05529 0.0253,0.22841 v 0.01757 0.08578 2.537312 0.135909 l 0.41548,0.415996 0.0692,0.06873 5.2e-4,5.17e-4 v 5.17e-4 l 0.0305,0.08113 h 0.0506 l 0.2651,0.264583 h 0.0439 0.59841 0.0222 0.62063 v 0.529167 0.529167 h 0.26407 v 0.01705 l 1.84175,-0.01705 h 1.59835 3.175 0.52917 v -0.65164 -0.517281 l 1.26297,0.05271 1.32292,0.05478 0.77463,0.07235 h 5.1e-4 l 0.1416,-0.202572 h 5.1e-4 l 0.0413,10e-4 0.11473,-0.223759 5.1e-4,-0.0016 5.2e-4,-5.17e-4 0.0233,-0.03307 0.005,-0.0078 0.0155,-0.0217 0.008,-0.01085 0.0506,-0.07235 0.28887,-0.21084 0.0103,-0.216524 v -5.17e-4 l 0.17157,-0.244429 v -2.30632 -0.22996 -0.724503 l 0.0357,-0.722437 -0.0357,0.05064 v -0.680579 -0.459403 l -5.2e-4,-5.17e-4 v -0.06925 l -0.0915,-0.05633 h -5.2e-4 l -5.2e-4,-5.16e-4 -0.11575,-0.15813 -0.003,-0.0047 -0.0279,-0.04496 -0.23151,-0.365352 -0.007,0.04599 -0.23513,-0.321944 -0.007,-0.0098 -0.001,0.0098 -5.94951,-0.127641 -5.91953,-0.12609 z" /></g></g></g>


<script type="text/javascript">
  <![CDATA[
    // Global Parameters and Variables
    //!export-start
    let _pn_setState         = 0;
    let _pb_boolState        = false;
    let _pn_setInterval      = 500;
    let _pc_state0Colour     = '#ffffff';
    let _pc_state1Colour     = '#00ff00';
    let _pc_state2Colour     = '#ff9500';
    let _pc_state3Colour     = '#ff0000';
    let _pc_state4Colour     = '#3c3c3c';
    let _pc_state5Colour     = '#dcdcdc';
    let _pn_lightShade       = 50;
    let _pn_highLightShade   = 90;
    let _pn_darkShade        = 15;
    let _pn_shadowShade      = -15;
    let _pn_strokeWidth      = 1;     
    let _pn_opacity          = 0.60;  
    let _pn_indicationMode   = 0;     
    //!export-end
    
    // Internal state variables
    let stateNumber = 0;
    let isBlinking = false;
    let myCheckInterval;
    
    // Force global timing mechanism by using epoch time
    function getGlobalBlinkState(interval) {
      // Use the current time divided by interval, which will give
      // the same result for all SVGs at the same moment
      return Math.floor(Date.now() / interval) % 2 === 0;
    }
    
    // Function to update the color based on the set state
    function logic() {
      switch (stateNumber) {
        case 0: // off
          setColors(_pc_state0Colour);
          stopBlinking();
          break; 
        case 1: // run
          setColors(_pc_state1Colour);
          stopBlinking();
          break;
        case 2: // warning
          setColors(_pc_state2Colour);
          stopBlinking();
          break;
        case 3: // fault
          startForceSync();
          break;
        case 4: // invalid 
          setColors(_pc_state4Colour);
          stopBlinking();
          break;
        case 5: // spare
          setColors(_pc_state5Colour);
          stopBlinking();
          break;
        default:
          console.log('Undefined State');
          stopBlinking();
      }
    }

    // Initial setup
    function init() {
      // Set up visibility change listener
      document.addEventListener('visibilitychange', handleVisibilityChange);
      
      // Initial state rendering
      logic(); 
    }
    
    // Handler for tab visibility changes
    function handleVisibilityChange() {
      if (document.visibilityState === 'visible' && isBlinking) {
        // Resume checking when tab becomes visible again
        startForceSync();
      } else if (document.visibilityState === 'hidden' && isBlinking) {
        // Pause checking when tab is hidden
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
    }
    
    // Update the blinking display based on global time
    function updateBlinkDisplay() {
      if (!isBlinking) return;
      
      // Get the global blink state
      const showFaultColor = getGlobalBlinkState(_pn_setInterval);
      
      // Set the appropriate color
      if (showFaultColor) {
        setColors(_pc_state3Colour);
      } else {
        setColors(_pc_state0Colour);
      }
    }
    
    // Start forced synchronization
    function startForceSync() {
      // Clear any existing interval
      stopBlinking();
      
      // Set blinking state
      isBlinking = true;
      
      // Update display immediately
      updateBlinkDisplay();
      
      // Check very frequently to ensure tight synchronization (every 16ms = ~60fps)
      myCheckInterval = setInterval(updateBlinkDisplay, 16);
    }

    // Function to update values from Fuxa
    function putValue(id, value) {
      if (id === '_pn_setState') {
        stateNumber = value;
        logic(); 
      }
      if (id === '_pb_boolState') {
        _pb_boolState = value;
        if (_pb_boolState === true) {
          stateNumber = 1;
        } else if (_pb_boolState === false) {
          stateNumber = 0;
        }
        logic(); 
      }
      if (id === '_pn_setInterval')    _pn_setInterval    = value;
      if (id === '_pc_state0Colour')   _pc_state0Colour   = value;
      if (id === '_pc_state1Colour')   _pc_state1Colour   = value;
      if (id === '_pc_state2Colour')   _pc_state2Colour   = value;
      if (id === '_pc_state3Colour')   _pc_state3Colour   = value;
      if (id === '_pc_state4Colour')   _pc_state4Colour   = value;
      if (id === '_pc_state5Colour')   _pc_state5Colour   = value;
      if (id === '_pn_lightShade')     _pn_lightShade     = value;
      if (id === '_pn_highLightShade') _pn_highLightShade = value;
      if (id === '_pn_darkShade')      _pn_darkShade      = value;
      if (id === '_pn_shadowShade')    _pn_shadowShade    = value;
      if (id === '_pn_strokeWidth')    _pn_strokeWidth    = value;
      if (id === '_pn_opacity')        _pn_opacity        = value;
      if (id === '_pn_indicationMode') _pn_indicationMode = value;
    }

    // Function to send values back to Fuxa (placeholder)
    function postValue(id, value) {
      console.error('Not defined!');
    }

    // Function to update the fill and/or stroke color based on indication mode
    function setColors(color) {
      // Get the single element with ID "shape"
      const shapeElement = document.getElementById('shape');
      if (!shapeElement) return; // Safety check
      
      // Set opacity
      shapeElement.style.opacity = _pn_opacity;
      
      // Set stroke width
      shapeElement.style.strokeWidth = _pn_strokeWidth;
      
      // Apply colors based on indication mode
      switch(_pn_indicationMode) {
        case 0: // Fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
          break;
        case 1: // Stroke only
          shapeElement.style.fill = "none";
          shapeElement.style.stroke = color;
          break;
        case 2: // Both fill and stroke
          shapeElement.style.fill = color;
          shapeElement.style.stroke = color;
          break;
        default:
          // Default to fill only
          shapeElement.style.fill = color;
          shapeElement.style.stroke = "none";
      }
    }

    // Function to stop blinking
    function stopBlinking() {
      if (myCheckInterval) {
        clearInterval(myCheckInterval);
        myCheckInterval = null;
      }
      isBlinking = false;
    }

    // Clean up event listeners when widget is destroyed
    function cleanup() {
      stopBlinking();
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    }

    // Initialize the SVG
    init();

    // Ensure cleanup when SVG is removed
    const cleanupObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.removedNodes.forEach((node) => {
          if (node.id === 'Layer_1') {
            cleanup();
            cleanupObserver.disconnect();
          }
        });
      });
    });
    cleanupObserver.observe(document.body, { childList: true, subtree: true });
  ]]>
  </script>
</svg>
